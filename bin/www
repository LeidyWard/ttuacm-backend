#!/usr/bin/env node
const fs = require('fs');
/**
 * Module dependencies.
 */
let port;

const app = require('../app');
const debug = require('debug')('ttuacm-website:server');
if (process.env.NODE_ENV === 'prod') {
  const http = require('https');
  port = 443;
  const sslPath = '/etc/letsencrypt/live/acmttu.org/'
  const options = {
    key: fs.readFileSync(sslPath + 'privkey.pem'),
    cert: fs.readFileSync(sslPath + 'fullchain.pem')
  }
  const server = http.createServer(options, app);
  server.listen(port);

  server.on('error', onError);
  server.on('listening', onListening);
} else {
  const http = require('http');
  port = 80;
  const server = http.createServer(app);
  server.listen(port);

  server.on('error', onError);
  server.on('listening', onListening);
}




/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log(`Listening on ${port}`);
}
