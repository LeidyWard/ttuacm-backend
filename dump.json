[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "ttuacm-backend/src/auth/auth.app.js",
    "content": "const functions = require('firebase-functions')\nconst express = require('express')\nconst bp = require('body-parser')\nconst cors = require('cors')\nconst passport = require('passport')\nconst passportConfig = require('./config/passport')\nconst router = require('./auth.router')\nconst connectDB = require('../utils/db-connect')\n\n// Env Variables from the Configs\nconst { environment, auth } = functions.config()\nprocess.env = auth\nprocess.env.NODE_ENV = environment.env\n\nconst database = process.env.db\n\nconnectDB(database) // Open connection to the database\n\nconst app = express()\napp.use('/api/v2', router)\n\napp.use(bp.json())\napp.use(bp.urlencoded({ extended: false }))\napp.use(cors({ origin: true }))\n\napp.use(passport.initialize())\napp.use(passport.session())\npassportConfig(passport)\n\nmodule.exports = app\n",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.app.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "functions",
    "memberof": "ttuacm-backend/src/auth/auth.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.app.js~functions",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "name": "express",
    "memberof": "ttuacm-backend/src/auth/auth.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.app.js~express",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "name": "bp",
    "memberof": "ttuacm-backend/src/auth/auth.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.app.js~bp",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "name": "cors",
    "memberof": "ttuacm-backend/src/auth/auth.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.app.js~cors",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "variable",
    "name": "passport",
    "memberof": "ttuacm-backend/src/auth/auth.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.app.js~passport",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "name": "passportConfig",
    "memberof": "ttuacm-backend/src/auth/auth.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.app.js~passportConfig",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "variable",
    "name": "router",
    "memberof": "ttuacm-backend/src/auth/auth.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.app.js~router",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "variable",
    "name": "connectDB",
    "memberof": "ttuacm-backend/src/auth/auth.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.app.js~connectDB",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "variable",
    "name": "environment",
    "memberof": "ttuacm-backend/src/auth/auth.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.app.js~environment",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "variable",
    "name": "database",
    "memberof": "ttuacm-backend/src/auth/auth.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.app.js~database",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "variable",
    "name": "app",
    "memberof": "ttuacm-backend/src/auth/auth.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.app.js~app",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.app.js",
    "importStyle": "app",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "file",
    "name": "ttuacm-backend/src/auth/auth.controller.js",
    "content": "const functions = require('firebase-functions')\nconst jwt = require('jsonwebtoken')\nconst querystring = require('querystring')\nconst bcrypt = require('bcryptjs')\nconst AuthModel = require('./auth.model')\nconst ErrorMessages = require('./auth.errors')\nconst generateHexToken = require('../utils/generate-hex')\nconst generateJWTToken = require('../utils/generate-jwt')\n\nprocess.env = functions.config().config\n\n// Bcrypt options\nconst saltRounds = 10\n\nclass AuthController {\n  constructor() {\n    this.DB = new AuthModel()\n  }\n\n  /**\n   * Register a new User\n   *\n   * @example\n   * <caption>\n   * firstName: 'Miggy',\n   * lastName: 'Reyes',\n   * username: 'miggylol',\n   * email: 'email@gmail.com',\n   * classification: 'Freshman',\n   * password: 'password'\n   * </caption>\n   * @param {Object} user - user object\n   * @param {string} user.password - user password\n   *\n   * @returns {Promise.<Object, Error>} Resolves with a user objectand rejects with an error\n   */\n  register(user) {\n    return new Promise(async (resolve, reject) => {\n      // If the email is available, continue with the proccess\n      try {\n        const query = { email: user.email }\n        const foundUser = await this.DB.getUserByAttribute(query)\n        if (foundUser !== undefined) reject(ErrorMessages.DuplicateAccount())\n        // Generates the salt used for hashing\n        bcrypt.hash(user.password, saltRounds, async (err, hash) => {\n          const newUser = user\n          const token = generateHexToken()\n\n          newUser.password = hash\n          newUser.confirmEmailToken = token\n          newUser.verified = false\n\n          const createdUser = await this.DB.createNewUser(newUser)\n          resolve(createdUser)\n        })\n      } catch (err) {\n        console.error(err)\n        reject(ErrorMessages.UnknownServerError())\n      }\n    })\n  }\n\n  /**\n   * Checks to see if there is a valid username and password combination\n   * that also has verified their email\n   *\n   * @param {string} email - user email\n   * @param {string} password - user password\n   *\n   * @todo What if the user somehow didn't get the verification email. How do we handle that?\n   * @returns {Promise.<token, Error>} Resolves with a JWT and rejects with an error\n   */\n  login(email, password) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const query = { email }\n        const foundUser = await this.DB.getUserByAttribute(query)\n\n        if (!foundUser) {\n          reject(ErrorMessages.NotFoundErr())\n        } else if (!foundUser.verified) {\n          reject(ErrorMessages.UserNotVerified())\n        } else if (foundUser !== null && foundUser.password !== null) {\n          // If the user has a signed up using a local auth strategy\n          bcrypt.compare(password, foundUser.password, async (err, validPassword) => {\n            if (err) {\n              console.error(err)\n              reject(ErrorMessages.UnknownServerError())\n            } else if (validPassword) {\n              const token = generateJWTToken(foundUser)\n              resolve({ token, foundUser })\n            } else {\n              reject(ErrorMessages.InvalidLogin())\n            }\n          })\n        }\n      } catch (err) {\n        console.error(err)\n        reject(ErrorMessages.UnknownServerError())\n      }\n    })\n  }\n\n  /**\n   * Starts the process of reseting a lost password for an existing user\n   *\n   * @param {string} email - user email\n   * @returns {Promise.<null, Object>} Resolves: object containg a HEX and a user, Rejects: error\n   */\n  forgotLogin(email) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const query = { email }\n        const update = {\n          resetPasswordToken: generateHexToken(),\n          resetPasswordExpires: Date.now() + 3 * 60 * 60 * 1000, // 3 Hours\n        }\n\n        const updatedUser = await this.DB.updateUserByAttribute(query, update)\n        if (updatedUser === null) {\n          reject(ErrorMessages.NotFoundErr())\n        } else {\n          resolve({ user: updatedUser })\n        }\n      } catch (err) {\n        console.error(err)\n        reject(ErrorMessages.UnknownServerError())\n      }\n    })\n  }\n\n  /**\n   * Hits when the user clicks the link that is sent to their email\n   *\n   * Will check whether or not the token passed in the URL is valid\n   * @param {string} token - HEX token associated with an account (resetPasswordToken)\n   * @returns {Promise.<token, Error>} Resolves: HEX Token, Rejects: an error\n   */\n  resetToken(resetPasswordToken) {\n    return new Promise(async (resolve, reject) => {\n      if (!resetPasswordToken) reject(ErrorMessages.MissingToken())\n      try {\n        const query = {\n          resetPasswordToken,\n          resetPasswordExpires: { $gt: Date.now() },\n        }\n\n        const user = await this.DB.getUserByAttribute(query)\n\n        // User was not found or the token was expired, either way...\n        // Signals the front end to tell the user that their token was invalid\n        // and that they may need to send another email\n        if (!user) reject(ErrorMessages.NotFoundErr())\n\n        // The token is valid and will signal front end to render the login page\n        // The token we are passing is the same token that is in the database\n        resolve(resetPasswordToken)\n      } catch (err) {\n        console.error(err)\n        reject(ErrorMessages.InvalidToken())\n      }\n    })\n  }\n\n  /**\n   * Verifies the user based on whether or not they pass a valid JWT Token\n   * and checks to see if the user actually exists\n   *\n   * @param {string} token - JWT Token\n   * @param {string} passwordAttempt - Attempted password from user\n   * @returns {Promise.<object, Error>} - Resolves with user or rejects with\n   * an error from bcrypt or finding a document in Mongo\n   */\n  verifyUser(token, passwordAttempt) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        bcrypt.hash(passwordAttempt, saltRounds, async (err, hash) => {\n          if (err) {\n            console.error(err)\n            reject(ErrorMessages.UnknownServerError())\n          }\n          const query = {\n            resetPasswordToken: token,\n            resetPasswordExpires: { $gt: Date.now() },\n          }\n          const update = {\n            // Need to encrypt the password first\n            password: hash,\n            resetPasswordToken: undefined,\n            resetPasswordExpires: undefined,\n          }\n          const updatedUser = await this.DB.updateUserByAttribute(query, update)\n          if (!updatedUser) reject(ErrorMessages.NotFoundErr())\n          resolve(updatedUser)\n        })\n      } catch (err) {\n        console.error(err)\n        reject(ErrorMessages.NotFoundErr())\n      }\n    })\n  }\n\n  /**\n   * Endpoint hit when a user clicks on their confirmation link\n   *\n   * Compares the url token with the token saved in the database.\n   * If thre is a match, the user is verified and redirected to log in\n   * @param {string} token - HEX Token\n   * @returns {Promise.<null, Error>} Rejects: an error\n   */\n  confirmToken(confirmEmailToken) {\n    return new Promise(async (resolve, reject) => {\n      const query = { confirmEmailToken }\n      const update = {\n        confirmEmailToken: '',\n        verified: true,\n      }\n\n      try {\n        const user = await this.DB.updateUserByAttribute(query, update)\n        if (!user) reject(ErrorMessages.NotFoundErr())\n        resolve(user)\n      } catch (err) {\n        console.error(err)\n        reject(ErrorMessages.NotFoundErr())\n      }\n    })\n  }\n\n  /**\n   * Redirects user to homepage after logging in with OAuth2\n   *\n   * @param {object} user - user object\n   * @returns {string} a query string to add to a redirect\n   */\n  static oauth2(user) {\n    const token = jwt.sign({ data: user }, process.env.session_secret, {\n      expiresIn: 604800, // 1 week\n    })\n\n    const qs = querystring.stringify({\n      token: `JWT ${token}`,\n    })\n\n    return qs\n  }\n}\n\nmodule.exports = AuthController\n",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 13,
    "kind": "variable",
    "name": "functions",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~functions",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "variable",
    "name": "jwt",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~jwt",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "variable",
    "name": "querystring",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~querystring",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "variable",
    "name": "bcrypt",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~bcrypt",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "variable",
    "name": "AuthModel",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~AuthModel",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "variable",
    "name": "ErrorMessages",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~ErrorMessages",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "variable",
    "name": "generateHexToken",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~generateHexToken",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "variable",
    "name": "generateJWTToken",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~generateJWTToken",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "variable",
    "name": "saltRounds",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~saltRounds",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "class",
    "name": "AuthController",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~AuthController",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.js",
    "importStyle": "AuthController",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 23,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js~AuthController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~AuthController#constructor",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 24,
    "kind": "member",
    "name": "DB",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js~AuthController",
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~AuthController#DB",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "method",
    "name": "register",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js~AuthController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~AuthController#register",
    "access": null,
    "description": "Register a new User",
    "examples": [
      "<caption>\nfirstName: 'Miggy',\nlastName: 'Reyes',\nusername: 'miggylol',\nemail: 'email@gmail.com',\nclassification: 'Freshman',\npassword: 'password'\n</caption>"
    ],
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Object, Error>} Resolves with a user objectand rejects with an error"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user.password",
        "description": "user password"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Object, Error>"
      ],
      "spread": false,
      "description": "Resolves with a user objectand rejects with an error"
    }
  },
  {
    "__docId__": 26,
    "kind": "method",
    "name": "login",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js~AuthController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~AuthController#login",
    "access": null,
    "description": "Checks to see if there is a valid username and password combination\nthat also has verified their email",
    "lineNumber": 73,
    "todo": [
      "What if the user somehow didn't get the verification email. How do we handle that?"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<token, Error>} Resolves with a JWT and rejects with an error"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "user email"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "user password"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<token, Error>"
      ],
      "spread": false,
      "description": "Resolves with a JWT and rejects with an error"
    }
  },
  {
    "__docId__": 27,
    "kind": "method",
    "name": "forgotLogin",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js~AuthController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~AuthController#forgotLogin",
    "access": null,
    "description": "Starts the process of reseting a lost password for an existing user",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<null, Object>} Resolves: object containg a HEX and a user, Rejects: error"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "user email"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<null, Object>"
      ],
      "spread": false,
      "description": "Resolves: object containg a HEX and a user, Rejects: error"
    }
  },
  {
    "__docId__": 28,
    "kind": "method",
    "name": "resetToken",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js~AuthController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~AuthController#resetToken",
    "access": null,
    "description": "Hits when the user clicks the link that is sent to their email\n\nWill check whether or not the token passed in the URL is valid",
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<token, Error>} Resolves: HEX Token, Rejects: an error"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "HEX token associated with an account (resetPasswordToken)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<token, Error>"
      ],
      "spread": false,
      "description": "Resolves: HEX Token, Rejects: an error"
    }
  },
  {
    "__docId__": 29,
    "kind": "method",
    "name": "verifyUser",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js~AuthController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~AuthController#verifyUser",
    "access": null,
    "description": "Verifies the user based on whether or not they pass a valid JWT Token\nand checks to see if the user actually exists",
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<object, Error>} - Resolves with user or rejects with\nan error from bcrypt or finding a document in Mongo"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "JWT Token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "passwordAttempt",
        "description": "Attempted password from user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<object, Error>"
      ],
      "spread": false,
      "description": "Resolves with user or rejects with\nan error from bcrypt or finding a document in Mongo"
    }
  },
  {
    "__docId__": 30,
    "kind": "method",
    "name": "confirmToken",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js~AuthController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~AuthController#confirmToken",
    "access": null,
    "description": "Endpoint hit when a user clicks on their confirmation link\n\nCompares the url token with the token saved in the database.\nIf thre is a match, the user is verified and redirected to log in",
    "lineNumber": 211,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<null, Error>} Rejects: an error"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "HEX Token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<null, Error>"
      ],
      "spread": false,
      "description": "Rejects: an error"
    }
  },
  {
    "__docId__": 31,
    "kind": "method",
    "name": "oauth2",
    "memberof": "ttuacm-backend/src/auth/auth.controller.js~AuthController",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.js~AuthController.oauth2",
    "access": null,
    "description": "Redirects user to homepage after logging in with OAuth2",
    "lineNumber": 236,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} a query string to add to a redirect"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "a query string to add to a redirect"
    }
  },
  {
    "__docId__": 32,
    "kind": "file",
    "name": "ttuacm-backend/src/auth/auth.controller.spec.js",
    "content": "require('firebase-functions-test')()\nconst chai = require('chai')\nconst mongoose = require('mongoose')\nconst Controller = require('./auth.controller')\nconst Model = require('./auth.model')\nconst ErrorMessages = require('./auth.errors')\n\nconst { expect } = chai\n\ndescribe('Auth Unit Tests', () => {\n  let ctrl\n  let model\n  // eslint-disable-next-line\n  beforeAll((done) => {\n    mongoose.connect('mongodb://localhost:27017/testing', {\n      useNewUrlParser: true,\n    }, (err) => {\n      done(err)\n    })\n  })\n\n  beforeEach(() => {\n    ctrl = new Controller()\n    model = new Model()\n  })\n\n  afterEach(() => {\n    // Make sure to at least create one user for each test\n    // or this will error out\n    mongoose.connection.dropCollection('students')\n  })\n\n  it('[register] should save a new user to the database', () => {\n    const testUser = {\n      email: 'email@gmail.com',\n      password: 'password',\n    }\n\n    return ctrl.register(testUser)\n      .then((createdUser) => {\n        expect(createdUser.email).to.equal('email@gmail.com')\n        expect(createdUser.password).not.to.equal('password')\n      })\n  })\n\n  it('[register] should reject a new user to the database if they share an email', async () => {\n    const testUser = {\n      email: 'email@gmail.com',\n      password: 'password',\n    }\n\n    try {\n      await ctrl.register(testUser)\n      await ctrl.register(testUser)\n      throw ErrorMessages.ErrorTestUtil()\n    } catch(err) {\n      const targetError = ErrorMessages.DuplicateAccount()\n      expect(err.message).to.equal(targetError.message)\n      expect(err.code).to.equal(targetError.code)\n    }\n  })\n\n  it('[login] should block a user login if they are not verified', async () => {\n    const testUser = {\n      email: 'email@gmail',\n      password: 'password',\n    }\n\n    await ctrl.register(testUser)\n\n    try {\n      await ctrl.login(testUser.email, testUser.password)\n    } catch (err) {\n      const targetError = ErrorMessages.UserNotVerified()\n      expect(err.message).to.equal(targetError.message)\n      expect(err.code).to.equal(targetError.code)\n    }\n  })\n\n  it('[login] should block a user to login if they are give the wrong password', async () => {\n    const testUser = {\n      email: 'email@gmail',\n      password: 'password',\n    }\n\n    const newUser = await ctrl.register(testUser)\n\n    try {\n      await ctrl.confirmToken(newUser.confirmEmailToken)\n      await ctrl.login(testUser.email, 'NotTheRightPassword')\n    } catch (err) {\n      const targetError = ErrorMessages.InvalidLogin()\n      expect(err.message).to.equal(targetError.message)\n      expect(err.code).to.equal(targetError.code)\n    }\n  })\n\n  it('[login] should allow a user to login if they are give the right password', async () => {\n    const testUser = {\n      email: 'email@gmail',\n      password: 'password',\n      verified: true\n    }\n\n    const newUser = await ctrl.register(testUser)\n\n    try {\n      await ctrl.confirmToken(newUser.confirmEmailToken)\n      // testUser is passed by reference so you have to hardcode password\n      const { token, foundUser } = await ctrl.login(testUser.email, 'password')\n      expect(token).to.exist\n      expect(foundUser).to.exist\n    } catch (err) {\n      expect(err).not.to.exist\n    }\n  })\n\n  it('[forgotLogin] should update the user\\'s resetPass attributes', async () => {\n    const testUser = {\n      email: 'email@gmail',\n      password: 'password',\n      confirmEmailToken: '',\n      verified: true\n    }\n\n    try {\n      await model.createNewUser(testUser)\n      const { user } = await ctrl.forgotLogin(testUser.email)\n      expect(user.resetPasswordExpires).to.exist\n      expect(user.resetPasswordToken).to.exist\n    } catch (err) {\n      expect(err).not.to.exist\n    }\n  })\n\n  it('[forgotLogin] should throw error if an email was not found', async () => {\n    const testUser = {\n      email: 'email@gmail',\n      password: 'password',\n      verified: true\n    }\n\n    try {\n      await model.createNewUser(testUser)\n      await ctrl.forgotLogin('NotAValidEmail')\n      throw ErrorMessages.ErrorTestUtil()\n    } catch (err) {\n      const targetError = ErrorMessages.NotFoundErr()\n      expect(err.message).to.equal(targetError.message)\n      expect(err.code).to.equal(targetError.code)\n    }\n  })\n\n  it('[resetToken] should throw an error if a reset token was not passed', async () => {\n    try {\n      await model.createNewUser({ email: 'email' })\n      await ctrl.resetToken()\n      throw ErrorMessages.ErrorTestUtil()\n    } catch (err) {\n      const targetError = ErrorMessages.MissingToken()\n      expect(err.message).to.equal(targetError.message)\n      expect(err.code).to.equal(targetError.code)\n    }\n  })\n\n  it('[resetToken] should throw an error if an invalid token was passed', async () => {\n    try {\n      await model.createNewUser({ email: 'email' })\n      await ctrl.resetToken('Bad Token')\n      throw ErrorMessages.ErrorTestUtil()\n    } catch (err) {\n      const targetError = ErrorMessages.NotFoundErr()\n      expect(err.message).to.equal(targetError.message)\n      expect(err.code).to.equal(targetError.code)\n    }\n  })\n\n  it('[resetToken] should resolve with the user\\'s token', async () => {\n    const testUser = {\n      email: 'email@gmail.com',\n      password: 'password',\n      resetPasswordToken: 'Token',\n      resetPasswordExpires: Date.now() + 1000000\n    }\n\n    try {\n      await model.createNewUser(testUser)\n      const successToken = await ctrl.resetToken('Token')\n      expect(successToken).to.exist\n    } catch (err) {\n      expect(err).not.to.exist\n    }\n  })\n\n  it('[verifyUser] should throw an error when the user passes a bad JWT', async () => {\n    const testUser = {\n      email: 'email@gmail.com',\n      password: 'password',\n      resetPasswordToken: 'Token',\n      resetPasswordExpires: Date.now() + 1000000\n    }\n\n    try {\n      await model.createNewUser(testUser)\n      await ctrl.verifyUser('Bad Token', 'password')\n      throw ErrorMessages.ErrorTestUtil()\n    } catch (err) {\n      const targetError = ErrorMessages.NotFoundErr()\n      expect(err.message).to.equal(targetError.message)\n      expect(err.code).to.equal(targetError.code)\n    }\n  })\n\n  it('[verifyUser] should update the found user they pass a JWT', async () => {\n    const testUser = {\n      email: 'email@gmail.com',\n      password: 'password',\n      resetPasswordToken: 'Token',\n      resetPasswordExpires: Date.now() + 1000000\n    }\n\n    try {\n      await model.createNewUser(testUser)\n      const updatedUser = await ctrl.verifyUser('Token', 'password')\n      expect(updatedUser).to.exist\n    } catch (err) {\n      expect(err).not.to.exist\n    }\n  })\n\n  it('[confirmToken] should correctly compare two matching tokens', async () => {\n    const testUser = {\n      email: 'email@gmail.com',\n      password: 'password',\n      confirmEmailToken: 'Token'\n    }\n\n    try {\n      await model.createNewUser(testUser)\n      const updatedUser = await ctrl.confirmToken('Token')\n      expect(updatedUser.confirmEmailToken).to.equal('')\n      expect(updatedUser.verified).to.equal(true)\n    } catch (err) {\n      expect(err).not.to.exist\n    }\n  })\n\n  it('[confirmToken] should throw error for two mismatching tokens', async () => {\n    const testUser = {\n      email: 'email@gmail.com',\n      password: 'password',\n      confirmEmailToken: 'Token'\n    }\n\n    try {\n      await model.createNewUser(testUser)\n      await ctrl.confirmToken('Bad Token')\n      throw ErrorMessages.ErrorTestUtil()\n    } catch (err) {\n      const targetError = ErrorMessages.NotFoundErr()\n      expect(err.message).to.equal(targetError.message)\n      expect(err.code).to.equal(targetError.code)\n    }\n  })\n})\n",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 33,
    "kind": "variable",
    "name": "chai",
    "memberof": "ttuacm-backend/src/auth/auth.controller.spec.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.spec.js~chai",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.spec.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "ttuacm-backend/src/auth/auth.controller.spec.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.spec.js~mongoose",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.spec.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "variable",
    "name": "Controller",
    "memberof": "ttuacm-backend/src/auth/auth.controller.spec.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.spec.js~Controller",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.spec.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 36,
    "kind": "variable",
    "name": "Model",
    "memberof": "ttuacm-backend/src/auth/auth.controller.spec.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.spec.js~Model",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.spec.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 37,
    "kind": "variable",
    "name": "ErrorMessages",
    "memberof": "ttuacm-backend/src/auth/auth.controller.spec.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.spec.js~ErrorMessages",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.spec.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 38,
    "kind": "variable",
    "name": "expect",
    "memberof": "ttuacm-backend/src/auth/auth.controller.spec.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.controller.spec.js~expect",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.controller.spec.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "file",
    "name": "ttuacm-backend/src/auth/auth.errors.js",
    "content": "function InvalidAPIOption(option) {\n  const err = new Error(`The API: '${option}' is not supported`)\n  err.code = 404\n  return err\n}\n\nfunction OAuthError() {\n  const err = new Error('There was an error with the the credentials, please refresh manually')\n  err.code = 404\n  return err\n}\n\nfunction NotFoundErr() {\n  const err = new Error('Cannot find user in datbase')\n  err.code = 404\n  return err\n}\n\nfunction MergeAccError() {\n  const err = new Error('There was an error in merging the account')\n  err.code = 409\n  return err\n}\n\nfunction CreateUserError() {\n  const err = new Error('Could not create user')\n  err.code = 409\n  return err\n}\n\nfunction DuplicateAccount() {\n  const err = new Error('There is already an account with that email/id')\n  err.code = 409\n  return err\n}\n\nfunction HashingErr() {\n  const err = new Error('Error hashing password')\n  err.code = 404\n  return err\n}\n\nfunction UnknownServerError() {\n  const err = new Error('Unknown server error')\n  err.code = 404\n  return err\n}\n\nfunction InvalidLogin() {\n  const err = new Error('Invalid Login')\n  err.code = 404\n  return err\n}\n\nfunction UserNotVerified() {\n  const err = new Error('User has not been verified')\n  err.code = 404\n  return err\n}\n\nfunction MissingToken() {\n  const err = new Error('Not Token passed to endpoint')\n  err.code = 404\n  return err\n}\n\nfunction InvalidToken() {\n  const err = new Error('Not Token passed to endpoint')\n  err.code = 404\n  return err\n}\n\nfunction ErrorTestUtil() {\n  const err = new Error('should have thrown an error')\n  err.code = 404\n  return err\n}\n\nmodule.exports = {\n  ErrorTestUtil,\n  InvalidAPIOption,\n  InvalidLogin,\n  InvalidToken,\n  MissingToken,\n  UserNotVerified,\n  HashingErr,\n  CreateUserError,\n  UnknownServerError,\n  DuplicateAccount,\n  MergeAccError,\n  OAuthError,\n  NotFoundErr,\n}\n",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.errors.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 40,
    "kind": "function",
    "name": "InvalidAPIOption",
    "memberof": "ttuacm-backend/src/auth/auth.errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.errors.js~InvalidAPIOption",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.errors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "option",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "function",
    "name": "OAuthError",
    "memberof": "ttuacm-backend/src/auth/auth.errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.errors.js~OAuthError",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.errors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "function",
    "name": "NotFoundErr",
    "memberof": "ttuacm-backend/src/auth/auth.errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.errors.js~NotFoundErr",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.errors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "function",
    "name": "MergeAccError",
    "memberof": "ttuacm-backend/src/auth/auth.errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.errors.js~MergeAccError",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.errors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "function",
    "name": "CreateUserError",
    "memberof": "ttuacm-backend/src/auth/auth.errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.errors.js~CreateUserError",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.errors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "function",
    "name": "DuplicateAccount",
    "memberof": "ttuacm-backend/src/auth/auth.errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.errors.js~DuplicateAccount",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.errors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "function",
    "name": "HashingErr",
    "memberof": "ttuacm-backend/src/auth/auth.errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.errors.js~HashingErr",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.errors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "function",
    "name": "UnknownServerError",
    "memberof": "ttuacm-backend/src/auth/auth.errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.errors.js~UnknownServerError",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.errors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "function",
    "name": "InvalidLogin",
    "memberof": "ttuacm-backend/src/auth/auth.errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.errors.js~InvalidLogin",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.errors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "UserNotVerified",
    "memberof": "ttuacm-backend/src/auth/auth.errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.errors.js~UserNotVerified",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.errors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "MissingToken",
    "memberof": "ttuacm-backend/src/auth/auth.errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.errors.js~MissingToken",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.errors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "InvalidToken",
    "memberof": "ttuacm-backend/src/auth/auth.errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.errors.js~InvalidToken",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.errors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "ErrorTestUtil",
    "memberof": "ttuacm-backend/src/auth/auth.errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.errors.js~ErrorTestUtil",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.errors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "ttuacm-backend/src/auth/auth.model.js",
    "content": "const mongoose = require('mongoose')\nconst ErrorMessages = require('./auth.errors')\n\n// TODO: Clean up database again to split up the shemas\nconst studentSchema = mongoose.Schema({\n  googleId: { type: String, default: '' },\n  facebookId: { type: String, default: '' },\n  githubId: { type: String, default: '' },\n  email: { type: String, required: true },\n  password: { type: String, required: false, default: null },\n  confirmEmailToken: { type: String, default: '' },\n  resetPasswordToken: { type: String, default: '' },\n  resetPasswordExpires: { type: Date, default: null },\n  verified: { type: Boolean },\n}, { autoCreate: true })\n\nfunction filterUser(user) {\n  const filteredUser = user\n  // Delete unwanted data here using delete\n  return filteredUser\n}\n\n/**\n * Model that manages the students collection\n */\nclass AuthModel {\n  /**\n   * Creates a DB instance of the students collection\n   */\n  constructor() {\n    this.DB = mongoose.model('Students', studentSchema)\n  }\n\n  /**\n   * Updates the user by their email address\n   * @param {string} email - user email\n   * @param {string} targetAttr - attribute to change\n   * @param {string} finalAttr - value of target attribute after changes\n   */\n  updateUserByEmail(email, targetAttr, finalAttr) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const foundUser = await this.DB.findOne({ email }).exec()\n        foundUser[targetAttr] = finalAttr\n        const updatedUser = await foundUser.save().exec()\n        resolve(updatedUser)\n      } catch (err) {\n        console.error(err)\n        reject(ErrorMessages.CreateUserError)\n      }\n    })\n  }\n\n  /**\n   * Creates a new user\n   * @param {object} user - user object\n   */\n  createNewUser(user) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const newUser = new this.DB(user)\n        const createdUser = await newUser.save()\n        resolve(createdUser)\n      } catch (err) {\n        console.error(err)\n        reject(ErrorMessages.CreateUserError())\n      }\n    })\n  }\n\n  /**\n   * This will find the user by the ID\n   * @param {string} id The Mongo Id we are going to find\n   */\n  getUserById(id) {\n    this.DB.findById(id)\n      .then((user) => {\n        if (user !== null) return filterUser(user)\n        throw new Error() // A User was not found\n      })\n      .catch((err) => {\n        console.error(err)\n        return ErrorMessages.NotFoundErr()\n      })\n  }\n\n  /**\n   * This will find the user by the email\n   * @param {object} query - A query to the database\n   */\n  getUserByAttribute(query) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const user = await this.DB.findOne(query).exec()\n        if (user !== null) {\n          const filteredUser = filterUser(user)\n          resolve(filteredUser)\n        }\n        resolve()\n      } catch (err) {\n        console.error(err)\n        reject(ErrorMessages.NotFoundErr())\n      }\n    })\n  }\n\n  /**\n   * This will find the user by the email\n   * @param {string} attribute - the attribute to search\n   * @param {string} value - the attribute value to match\n   * @param {object} update - the attribute(s) to update\n   */\n  updateUserByAttribute(query, update) {\n    return new Promise((resolve, reject) => {\n      try {\n        const user = this.DB.findOneAndUpdate(query, update, { new: true }).exec()\n        if (user !== null) resolve(filterUser(user))\n        resolve()\n      } catch (err) {\n        console.error(err)\n        reject(ErrorMessages.UnknownServerError())\n      }\n    })\n  }\n\n  /**\n   * Gives a list of all the users in the database as an object\n   */\n  findAllUsers() {\n    this.DB.find()\n      .then((users) => {\n        if (users !== null) {\n          const data = users.map(user => ({\n            firstName: user.firstName,\n            lastName: user.lastName,\n            classification: user.classification,\n          }))\n          return data\n        }\n        throw new Error()\n      })\n      .catch((err) => {\n        console.error(err)\n        return ErrorMessages.NotFoundErr()\n      })\n  }\n\n  /**\n   * OAuth2 Google Account Merge\n   *\n   * Checks to see if there is already a user that has the recieved\n   * Google ID. If there is a user, we just log them in. If there is\n   * not a user with that Google ID, we check for an email that\n   * matches the email from the data passed back from Google and try\n   * to merge the accounts. If there is no email, a new account\n   * is made.\n   * @param {Object} profile OAuth2 Profile\n   * @param {Object} data Data object that will be passed\n   * @param {string} authProvider OAuth2Provider [Google, GitHub, Facebook]\n   */\n  mergeAccounts(profile, data, authProvider) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const existingUser = this.DB.findOne({ email: profile.email }).exec()\n        let newUser\n        if (existingUser !== null) {\n          existingUser[authProvider] = profile.id\n          newUser = existingUser\n        } else {\n          newUser = new this.DB(data)\n        }\n        newUser = await existingUser.save().exec()\n        resolve(newUser)\n      } catch (err) {\n        console.error(err)\n        reject(ErrorMessages.MergeAccError())\n      }\n    })\n  }\n\n  deleteUserByEmail(userEmail) {\n    this.DB.deleteOne({ email: userEmail })\n      .catch((err) => {\n        console.error(err)\n        return ErrorMessages.NotFoundErr()\n      })\n  }\n}\n\nmodule.exports = AuthModel\n",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.model.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "ttuacm-backend/src/auth/auth.model.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.model.js~mongoose",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "ErrorMessages",
    "memberof": "ttuacm-backend/src/auth/auth.model.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.model.js~ErrorMessages",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "studentSchema",
    "memberof": "ttuacm-backend/src/auth/auth.model.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.model.js~studentSchema",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "filterUser",
    "memberof": "ttuacm-backend/src/auth/auth.model.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.model.js~filterUser",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "user",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "class",
    "name": "AuthModel",
    "memberof": "ttuacm-backend/src/auth/auth.model.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.model.js~AuthModel",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.model.js",
    "importStyle": "AuthModel",
    "description": "Model that manages the students collection",
    "lineNumber": 26,
    "interface": false
  },
  {
    "__docId__": 59,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ttuacm-backend/src/auth/auth.model.js~AuthModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.model.js~AuthModel#constructor",
    "access": null,
    "description": "Creates a DB instance of the students collection",
    "lineNumber": 30,
    "params": []
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "DB",
    "memberof": "ttuacm-backend/src/auth/auth.model.js~AuthModel",
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.model.js~AuthModel#DB",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "updateUserByEmail",
    "memberof": "ttuacm-backend/src/auth/auth.model.js~AuthModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.model.js~AuthModel#updateUserByEmail",
    "access": null,
    "description": "Updates the user by their email address",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "user email"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetAttr",
        "description": "attribute to change"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "finalAttr",
        "description": "value of target attribute after changes"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "createNewUser",
    "memberof": "ttuacm-backend/src/auth/auth.model.js~AuthModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.model.js~AuthModel#createNewUser",
    "access": null,
    "description": "Creates a new user",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user object"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "getUserById",
    "memberof": "ttuacm-backend/src/auth/auth.model.js~AuthModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.model.js~AuthModel#getUserById",
    "access": null,
    "description": "This will find the user by the ID",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The Mongo Id we are going to find"
      }
    ]
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "getUserByAttribute",
    "memberof": "ttuacm-backend/src/auth/auth.model.js~AuthModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.model.js~AuthModel#getUserByAttribute",
    "access": null,
    "description": "This will find the user by the email",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "query",
        "description": "A query to the database"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "updateUserByAttribute",
    "memberof": "ttuacm-backend/src/auth/auth.model.js~AuthModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.model.js~AuthModel#updateUserByAttribute",
    "access": null,
    "description": "This will find the user by the email",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "attribute",
        "description": "the attribute to search"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the attribute value to match"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "update",
        "description": "the attribute(s) to update"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "findAllUsers",
    "memberof": "ttuacm-backend/src/auth/auth.model.js~AuthModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.model.js~AuthModel#findAllUsers",
    "access": null,
    "description": "Gives a list of all the users in the database as an object",
    "lineNumber": 129,
    "params": []
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "mergeAccounts",
    "memberof": "ttuacm-backend/src/auth/auth.model.js~AuthModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.model.js~AuthModel#mergeAccounts",
    "access": null,
    "description": "OAuth2 Google Account Merge\n\nChecks to see if there is already a user that has the recieved\nGoogle ID. If there is a user, we just log them in. If there is\nnot a user with that Google ID, we check for an email that\nmatches the email from the data passed back from Google and try\nto merge the accounts. If there is no email, a new account\nis made.",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "profile",
        "description": "OAuth2 Profile"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Data object that will be passed"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "authProvider",
        "description": "OAuth2Provider [Google, GitHub, Facebook]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "deleteUserByEmail",
    "memberof": "ttuacm-backend/src/auth/auth.model.js~AuthModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/auth.model.js~AuthModel#deleteUserByEmail",
    "access": null,
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "userEmail",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "ttuacm-backend/src/auth/auth.router.js",
    "content": "const express = require('express')\nconst passport = require('passport')\nconst querystring = require('querystring')\n\nconst router = express.Router()\n\nconst Controller = require('./auth.controller')\n\n/**\n * Testing route for the Auth Service\n *\n * - Endpoint: `/auth/api/v2`\n * - Verb: GET\n *\n * @typedef {function} AuthRouter\n */\nrouter.get('/', (req, res) => {\n  res.send('Auth App Works!')\n})\n\n/**\n * Gets the Google Login Screen\n *\n * - Endpoint: `/auth/api/v2/google`\n * - Verb: GET\n *\n * @typedef {function} AuthRouter-GoogleAuth\n */\nrouter.get(\n  '/google',\n  passport.authenticate('google', {\n    scope: [\n      'https://www.googleapis.com/auth/userinfo.profile',\n      'https://www.googleapis.com/auth/userinfo.email',\n    ],\n  }),\n)\n\n/**\n * Callback for Google OAuth2\n *\n * - Endpoint: `/auth/api/v2/google/redirect`\n * - Verb: GET\n *\n * @typedef {function} AuthRouter-GoogleAuthRedirect\n */\nrouter.get('/google/redirect', passport.authenticate('google'), (req, res) => {\n  const qs = Controller.oauth2(req.user)\n  res.redirect(`${req.body.redirectURL}/?${qs}`)\n})\n\n/**\n * Gets the GitHub Login Screen\n *\n * - Endpoint: `/auth/api/v2/github`\n * - Verb: GET\n *\n * @typedef {function} AuthRouter-GitHubAuth\n */\nrouter.get(\n  '/github',\n  passport.authenticate('github', {\n    scope: ['read:user'],\n  }),\n)\n\n/**\n * Callback for GitHub OAuth2\n *\n * - Endpoint: `/auth/api/v2/github/redirect`\n * - Verb: GET\n *\n * @typedef {function} AuthRouter-GitHubuthRedirect\n */\nrouter.get('/github/redirect', passport.authenticate('github'), (req, res) => {\n  const qs = Controller.oauth2(req.user)\n  res.redirect(`${req.body.redirectURL}/?${qs}`)\n})\n\n/**\n * Gets the Facebook Login Screen\n *\n * - Endpoint: `/auth/api/v2/facebook`\n * - Verb: GET\n *\n * @typedef {function} AuthRouter-FacebookAuth\n */\nrouter.get(\n  '/facebook',\n  passport.authenticate('facebook', {\n    scope: ['public_profile', 'email'],\n  }),\n)\n\n/**\n * Callback for Facebook OAuth2\n *\n * - Endpoint: `/auth/api/v2/facebook/redirect`\n * - Verb: GET\n *\n * @typedef {function} AuthRouter-GitHubuthRedirect\n */\nrouter.get(\n  '/facebook/redirect',\n  passport.authenticate('facebook', {\n    failureRedirect: '/login',\n  }),\n  (req, res) => {\n    const qs = Controller.oauth2(req.user)\n    res.redirect(`${req.body.redirectURL}/?${qs}`)\n  },\n)\n\n/**\n * Registers the user and saves them as a unverified user\n * It then sends an email to that user to verify\n *\n * - Endpoint: `/auth/api/v2/register`\n * - Verb: POST\n *\n * - OnFailure: Sends an error message\n * - OnSuccess: Sends the user back as JSON\n *\n * @typedef {function} AuthRouter-Register\n */\nrouter.post('/register', async (req, res) => {\n  const user = {\n    email: req.body.email,\n    password: req.body.password,\n    confirmEmailToken: null,\n  }\n  try {\n    const ctrl = new Controller()\n    const createdUser = await ctrl.register(user)\n    // TODO: Send Confirmation email\n    res.status(201).json({ createdUser })\n  } catch (err) {\n    res.status(err.code).json({ err })\n  }\n})\n\n/**\n * JWT Login/Authentication\n * User must not have signed up using OAuth2\n *\n * - Endpoint: `/auth/api/v2/login`\n * - Verb: POST\n *\n * - OnFailure: Sends an error message\n * - OnSuccess: Sends the JWT Token of the user\n *\n * @typedef {function} AuthRouter-Login\n */\nrouter.post('/login', (req, res) => {\n  const ctrl = new Controller()\n  const { email } = req.body\n  const inputPassword = req.body.password\n  ctrl.login(email, inputPassword)\n    .then((response) => {\n      const { token } = response\n      const user = response.foundUser\n      res.status(200).json({ token: `JWT ${token}`, user })\n    })\n    .catch((err) => {\n      res.status(err.code).json({ err })\n    })\n})\n\n/**\n * Confirms the user has a valid email account\n *\n * - Endpoint: `/auth/api/v2/confirm/:token`\n * - Verb: GET\n *\n * - OnFailure: Redirects to error page\n * - OnSuccess: Redirects to the login page with querystring to signal a notification\n *\n * @typedef {function} AuthRouter-ConfirmToken\n * @param {querystring} token - HEX token saved in confirmEmailToken\n */\nrouter.get('/confirm/:token', (req, res) => {\n  const ctrl = new Controller()\n  const { token } = req.params\n  const { redirectURL } = req.body\n  ctrl.confirmToken(token)\n    .then(() => {\n      const qs = querystring.stringify({ verify: 'success' })\n      res.redirect(`${redirectURL}/auth/?${qs}`)\n    })\n    .catch(() => {\n      const qs = querystring.stringify({ err: 'Error Validating Email' })\n      res.redirect(`${redirectURL}/?${qs}`)\n    })\n})\n\n/**\n * Verifies that the user is resetting the password of an account they own\n *\n * - Endpoint: `/auth/api/v2/forgot`\n * - Verb: POST\n *\n * - OnFailure: Sends an internal server error message\n * - OnSuccess: Sends the user that the email was sent to\n *\n * @typedef {function} AuthRouter-ForgotLogin\n * @param {string} req.body.email - Email for the account that needs to change passwords\n */\nrouter.post('/forgot', async (req, res) => {\n  try {\n    const ctrl = new Controller()\n    const { email } = req.body\n    const payload = await ctrl.forgotLogin(email)\n    // TODO: Send a reset email\n    res.status(200).json({ recipient: payload.user })\n  } catch (err) {\n    res.status(err.code).json({ msg: err.message })\n  }\n})\n\n/**\n * This endpoint is hit by an email to reset a user password\n * This endpoint is hit first in the sequence\n *\n * - Endpoint: `/auth/api/v2/reset/:token`\n * - Verb: GET\n *\n * - OnFailure: Redirects to the login screen with an error in query string\n * - OnSuccess: Redirects to the forgot-redirect page to change password\n *\n * @typedef {function} AuthRouter-ResetToken\n * @param {string} token - A string that contains the HEX code/Reset token of a lost account\n */\nrouter.get('/reset/:token', (req, res) => {\n  const ctrl = new Controller()\n  const { token } = req.params\n  const { redirectURL } = req.body\n  ctrl.resetToken(token)\n    .then((passToken) => {\n      const qs = querystring.stringify({ token: passToken })\n      res.redirect(`${redirectURL}/auth/forgot/redirect/?${qs}`)\n    })\n    .catch((err) => {\n      const qs = querystring.stringify({ err })\n      res.redirect(`${redirectURL}/auth/?${qs}`)\n    })\n})\n\n/**\n * Client hits this endpoint with a token and a new password to update the account with\n *\n * - Endpoint: `/auth/api/v2/reset/:token`\n * - Verb: POST\n *\n * - OnFailure: Sends a success status code\n * - OnSuccess: Sends a error status code\n *\n * @typedef {function} AuthRouter-VerifyUser\n */\nrouter.post('/reset/:token', async (req, res) => {\n  try {\n    const ctrl = new Controller()\n    const { token } = req.params\n    const { password } = req.body\n\n    const user = await ctrl.verifyUser(token, password)\n    // TODO: send a changed password email\n    res.status(200).json({ user })\n  } catch (err) {\n    res.status(404).json({ user: null })\n  }\n})\n\nmodule.exports = router\n",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "express",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~express",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "passport",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~passport",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "querystring",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~querystring",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "Controller",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~Controller",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "typedef",
    "name": "AuthRouter",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~AuthRouter",
    "access": null,
    "description": "Testing route for the Auth Service\n\n- Endpoint: `/auth/api/v2`\n- Verb: GET",
    "lineNumber": 17,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "AuthRouter"
    }
  },
  {
    "__docId__": 75,
    "kind": "typedef",
    "name": "AuthRouter-GoogleAuth",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~AuthRouter-GoogleAuth",
    "access": null,
    "description": "Gets the Google Login Screen\n\n- Endpoint: `/auth/api/v2/google`\n- Verb: GET",
    "lineNumber": 29,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "AuthRouter-GoogleAuth"
    }
  },
  {
    "__docId__": 76,
    "kind": "typedef",
    "name": "AuthRouter-GoogleAuthRedirect",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~AuthRouter-GoogleAuthRedirect",
    "access": null,
    "description": "Callback for Google OAuth2\n\n- Endpoint: `/auth/api/v2/google/redirect`\n- Verb: GET",
    "lineNumber": 47,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "AuthRouter-GoogleAuthRedirect"
    }
  },
  {
    "__docId__": 77,
    "kind": "typedef",
    "name": "AuthRouter-GitHubAuth",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~AuthRouter-GitHubAuth",
    "access": null,
    "description": "Gets the GitHub Login Screen\n\n- Endpoint: `/auth/api/v2/github`\n- Verb: GET",
    "lineNumber": 60,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "AuthRouter-GitHubAuth"
    }
  },
  {
    "__docId__": 78,
    "kind": "typedef",
    "name": "AuthRouter-GitHubuthRedirect",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~AuthRouter-GitHubuthRedirect",
    "access": null,
    "description": "Callback for GitHub OAuth2\n\n- Endpoint: `/auth/api/v2/github/redirect`\n- Verb: GET",
    "lineNumber": 75,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "AuthRouter-GitHubuthRedirect"
    }
  },
  {
    "__docId__": 79,
    "kind": "typedef",
    "name": "AuthRouter-FacebookAuth",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~AuthRouter-FacebookAuth",
    "access": null,
    "description": "Gets the Facebook Login Screen\n\n- Endpoint: `/auth/api/v2/facebook`\n- Verb: GET",
    "lineNumber": 88,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "AuthRouter-FacebookAuth"
    }
  },
  {
    "__docId__": 80,
    "kind": "typedef",
    "name": "AuthRouter-GitHubuthRedirect",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~AuthRouter-GitHubuthRedirect",
    "access": null,
    "description": "Callback for Facebook OAuth2\n\n- Endpoint: `/auth/api/v2/facebook/redirect`\n- Verb: GET",
    "lineNumber": 103,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "AuthRouter-GitHubuthRedirect"
    }
  },
  {
    "__docId__": 81,
    "kind": "typedef",
    "name": "AuthRouter-Register",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~AuthRouter-Register",
    "access": null,
    "description": "Registers the user and saves them as a unverified user\nIt then sends an email to that user to verify\n\n- Endpoint: `/auth/api/v2/register`\n- Verb: POST\n\n- OnFailure: Sends an error message\n- OnSuccess: Sends the user back as JSON",
    "lineNumber": 126,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "AuthRouter-Register"
    }
  },
  {
    "__docId__": 82,
    "kind": "typedef",
    "name": "AuthRouter-Login",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~AuthRouter-Login",
    "access": null,
    "description": "JWT Login/Authentication\nUser must not have signed up using OAuth2\n\n- Endpoint: `/auth/api/v2/login`\n- Verb: POST\n\n- OnFailure: Sends an error message\n- OnSuccess: Sends the JWT Token of the user",
    "lineNumber": 154,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "AuthRouter-Login"
    }
  },
  {
    "__docId__": 83,
    "kind": "typedef",
    "name": "AuthRouter-ConfirmToken",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~AuthRouter-ConfirmToken",
    "access": null,
    "description": "Confirms the user has a valid email account\n\n- Endpoint: `/auth/api/v2/confirm/:token`\n- Verb: GET\n\n- OnFailure: Redirects to error page\n- OnSuccess: Redirects to the login page with querystring to signal a notification",
    "lineNumber": 181,
    "params": [
      {
        "nullable": null,
        "types": [
          "querystring"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "HEX token saved in confirmEmailToken"
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "AuthRouter-ConfirmToken"
    }
  },
  {
    "__docId__": 84,
    "kind": "typedef",
    "name": "AuthRouter-ForgotLogin",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~AuthRouter-ForgotLogin",
    "access": null,
    "description": "Verifies that the user is resetting the password of an account they own\n\n- Endpoint: `/auth/api/v2/forgot`\n- Verb: POST\n\n- OnFailure: Sends an internal server error message\n- OnSuccess: Sends the user that the email was sent to",
    "lineNumber": 208,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "req.body.email",
        "description": "Email for the account that needs to change passwords"
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "AuthRouter-ForgotLogin"
    }
  },
  {
    "__docId__": 85,
    "kind": "typedef",
    "name": "AuthRouter-ResetToken",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~AuthRouter-ResetToken",
    "access": null,
    "description": "This endpoint is hit by an email to reset a user password\nThis endpoint is hit first in the sequence\n\n- Endpoint: `/auth/api/v2/reset/:token`\n- Verb: GET\n\n- OnFailure: Redirects to the login screen with an error in query string\n- OnSuccess: Redirects to the forgot-redirect page to change password",
    "lineNumber": 233,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "A string that contains the HEX code/Reset token of a lost account"
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "AuthRouter-ResetToken"
    }
  },
  {
    "__docId__": 86,
    "kind": "typedef",
    "name": "AuthRouter-VerifyUser",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~AuthRouter-VerifyUser",
    "access": null,
    "description": "Client hits this endpoint with a token and a new password to update the account with\n\n- Endpoint: `/auth/api/v2/reset/:token`\n- Verb: POST\n\n- OnFailure: Sends a success status code\n- OnSuccess: Sends a error status code",
    "lineNumber": 259,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "AuthRouter-VerifyUser"
    }
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "router",
    "memberof": "ttuacm-backend/src/auth/auth.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.js~router",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.router.js",
    "importStyle": "router",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "ttuacm-backend/src/auth/auth.router.spec.js",
    "content": "const test = require('firebase-functions-test')\nconst chai = require('chai')\n\nconst { expect } = chai\ntest()\n\ndescribe('Auth Integration Tests', () => {\n  it('should run a test', () => {\n    expect(true).to.equal(true)\n  })\n})\n",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "test",
    "memberof": "ttuacm-backend/src/auth/auth.router.spec.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.spec.js~test",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.router.spec.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "chai",
    "memberof": "ttuacm-backend/src/auth/auth.router.spec.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.spec.js~chai",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.router.spec.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "expect",
    "memberof": "ttuacm-backend/src/auth/auth.router.spec.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/auth.router.spec.js~expect",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/auth.router.spec.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "ttuacm-backend/src/auth/config/oauth2.js",
    "content": "const fs = require('fs')\nconst readline = require('readline')\nconst path = require('path')\nconst { google } = require('googleapis')\n\nconst ErrorMessages = require('../auth.errors')\n\n// If modifying these scopes, delete credentials.json.\nconst SCOPES = [\n  'https://www.googleapis.com/auth/calendar',\n  'https://www.google.com/m8/feeds/',\n]\n\nconst TOKEN_PATH = path.resolve(__dirname, 'credentials.json')\n\nclass OAuthHandler {\n  constructor() {\n    console.log('Grabbing Google API credentials...')\n    try {\n      this.content = fs.readFileSync(path.resolve(__dirname, 'client_secret.json'))\n    } catch (err) {\n      console.error('Cannot read Client Secret')\n      process.exit(1)\n    }\n  }\n\n  createAPI(option) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await this._authorize(JSON.parse())\n\n        let api\n        // Create all the Google API Objects\n        switch(option) {\n          case('calendar'):\n            api = google.calendar({ version: 'v3', auth: this.oAuth2Client });\n            break\n          case('contacts'):\n            api = google.people({ version: 'v1', auth: this.oAuth2Client });\n            break\n          default:\n            reject(ErrorMessages.InvalidAPIOption())\n            break\n        }\n\n        resolve(api)\n      } catch (err) {\n        console.error(err)\n        reject(ErrorMessages.OAuthError())\n      }\n    })\n  }\n\n  /**\n   * Create an OAuth2 client with the given credentials, and then execute the\n   * given callback function.\n   * @param {Object} credentials The authorization client credentials.\n   * @return {function} if error in reading credentials.json asks for a new one.\n   */\n  _authorize() {\n    return new Promise(async (resolve, reject) => {\n      // Gets the information out of the token\n      let token = {}\n      // eslint-disable-next-line\n      const { client_secret, client_id, redirect_uris } = this.content.installed\n      this.oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0])\n\n      // Check if we have previously stored a token.\n      try {\n        token = fs.readFileSync(TOKEN_PATH)\n      } catch (err) {\n        this.oAuth2Client = await this._getAccessToken()\n      }\n\n      if (this.oAuth2Client === null) reject(ErrorMessages.OAuthError)\n      this.oAuth2Client.setCredentials(JSON.parse(token))\n\n      resolve()\n    })\n  }\n\n  /**\n   * Get and store new token after prompting for user authorization, and then\n   * execute the given callback with the authorized OAuth2 client.\n   * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\n   */\n  _getAccessToken() {\n    return new Promise((resolve, reject) => {\n      const authUrl = this.oAuth2Client.generateAuthUrl({\n        access_type: 'offline',\n        scope: SCOPES,\n      })\n      console.log('Authorize this app by visiting this url:', authUrl)\n      const rl = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout,\n      })\n      rl.question('Enter the code from that page here: ', (code) => {\n        rl.close()\n        this.oAuth2Client.getToken(code, (err, token) => {\n          if (err) reject(err)\n          this.oAuth2Client.setCredentials(token)\n          // Store the token to disk for later program executions\n          try {\n            fs.writeFileSync(TOKEN_PATH, JSON.stringify(token))\n            console.log('Token stored to', TOKEN_PATH)\n          } catch (storeErr) {\n            console.error(storeErr)\n            reject(storeErr)\n          }\n          resolve()\n        })\n      })\n    })\n  }\n}\n\nmodule.exports = OAuthHandler\n",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "fs",
    "memberof": "ttuacm-backend/src/auth/config/oauth2.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js~fs",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/oauth2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "readline",
    "memberof": "ttuacm-backend/src/auth/config/oauth2.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js~readline",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/oauth2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "path",
    "memberof": "ttuacm-backend/src/auth/config/oauth2.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js~path",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/oauth2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "google",
    "memberof": "ttuacm-backend/src/auth/config/oauth2.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js~google",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/oauth2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "ErrorMessages",
    "memberof": "ttuacm-backend/src/auth/config/oauth2.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js~ErrorMessages",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/oauth2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "SCOPES",
    "memberof": "ttuacm-backend/src/auth/config/oauth2.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js~SCOPES",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/oauth2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "TOKEN_PATH",
    "memberof": "ttuacm-backend/src/auth/config/oauth2.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js~TOKEN_PATH",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/oauth2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "class",
    "name": "OAuthHandler",
    "memberof": "ttuacm-backend/src/auth/config/oauth2.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js~OAuthHandler",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/oauth2.js",
    "importStyle": "OAuthHandler",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 101,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ttuacm-backend/src/auth/config/oauth2.js~OAuthHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js~OAuthHandler#constructor",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "content",
    "memberof": "ttuacm-backend/src/auth/config/oauth2.js~OAuthHandler",
    "static": false,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js~OAuthHandler#content",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "createAPI",
    "memberof": "ttuacm-backend/src/auth/config/oauth2.js~OAuthHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js~OAuthHandler#createAPI",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "option",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "_authorize",
    "memberof": "ttuacm-backend/src/auth/config/oauth2.js~OAuthHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js~OAuthHandler#_authorize",
    "access": null,
    "description": "Create an OAuth2 client with the given credentials, and then execute the\ngiven callback function.",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials",
        "description": "The authorization client credentials."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "if error in reading credentials.json asks for a new one."
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "oAuth2Client",
    "memberof": "ttuacm-backend/src/auth/config/oauth2.js~OAuthHandler",
    "static": false,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js~OAuthHandler#oAuth2Client",
    "access": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "oAuth2Client",
    "memberof": "ttuacm-backend/src/auth/config/oauth2.js~OAuthHandler",
    "static": false,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js~OAuthHandler#oAuth2Client",
    "access": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "_getAccessToken",
    "memberof": "ttuacm-backend/src/auth/config/oauth2.js~OAuthHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/auth/config/oauth2.js~OAuthHandler#_getAccessToken",
    "access": null,
    "description": "Get and store new token after prompting for user authorization, and then\nexecute the given callback with the authorized OAuth2 client.",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "google.auth.OAuth2"
        ],
        "spread": false,
        "optional": false,
        "name": "oAuth2Client",
        "description": "The OAuth2 client to get token for."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "ttuacm-backend/src/auth/config/passport.js",
    "content": "const passportJwt = require('passport-jwt')\nconst { ExtractJwt } = require('passport-jwt')\nconst passportGoogle = require('passport-google-oauth2')\nconst passportGitHub = require('passport-github')\nconst passportFacebook = require('passport-facebook')\n\nconst JwtStrategy = passportJwt.Strategy\nconst GoogleStrategy = passportGoogle.Strategy\nconst GitHubStrategy = passportGitHub.Strategy\nconst FacebookStrategy = passportFacebook.Strategy\n\nconst User = require('../auth.model')\n\n/**\n * Uses a JWT stategy to verify the token\n *\n * @param {object} passport I'm not really sure. It's pretty magical tbh\n */\nmodule.exports = (passport) => {\n  passport.serializeUser((user, done) => {\n    done(null, user.id)\n  })\n\n  passport.deserializeUser((id, done) => {\n    User.findById(id).then((user) => {\n      done(null, user)\n    })\n  })\n\n  // JWT Strategy\n  const jwtOpts = {\n    jwtFromRequest: ExtractJwt.fromAuthHeaderWithScheme('jwt'),\n    secretOrKey: process.env.session_secret,\n  }\n  passport.use(\n    new JwtStrategy(jwtOpts, (jwtPayload, done) => {\n      User.getUserById(jwtPayload.data._id, (err, user) => {\n        if (err) {\n          return done(err, false)\n        }\n        if (user) {\n          return done(null, user)\n        }\n        return done(null, false)\n      })\n    }),\n  )\n\n  // Google Strategy\n  const googleClientID = process.env.google_clientid\n  const googleClientSecret = process.env.google_client_secret\n  const googleOpts = {\n    // Change this callback URL in production\n    callbackURL: '/api/auth/google/redirect',\n    clientID: googleClientID,\n    clientSecret: googleClientSecret,\n  }\n  passport.use(\n    new GoogleStrategy(googleOpts, (accessToken, refreshToken, profile, done) => {\n      User.findOne({ googleId: profile.id })\n        .then((currentUser) => {\n          if (currentUser) {\n            // User exists in database\n            done(null, currentUser)\n          } else {\n            const data = {\n              googleId: profile.id,\n              email: profile.email,\n              firstName: profile.displayName.split(' ')[0],\n              lastName: profile.displayName.split(' ')[1],\n              verified: true,\n            }\n            User.mergeAccounts(profile, data, 'googleId', (err, user) => {\n              done(err, user)\n            })\n          }\n        })\n        .catch((err) => {\n          console.log(err)\n          done(err, null)\n        })\n    }),\n  )\n\n  // GitHub Strategy\n  const githubClientID = process.env.github_clientid\n  const githubClientSecret = process.env.github_client_secret\n  const githubOpts = {\n    callbackURL: '/api/auth/github/redirect',\n    clientID: githubClientID,\n    clientSecret: githubClientSecret,\n  }\n  passport.use(\n    new GitHubStrategy(githubOpts, (accessToken, refreshToken, profile, done) => {\n      User.findOne({ githubId: profile.id })\n        .then((currentUser) => {\n          if (currentUser) {\n            done(null, currentUser)\n          } else {\n            // Sometimes, the user has their email access set to private\n            // In that case, we save their id instead\n            const emailData = profile._json.email === null ? profile.id : profile._json.email\n            const data = {\n              githubId: profile.id,\n              email: emailData,\n              firstName: profile.displayName.split(' ')[0],\n              lastName: profile.displayName.split(' ')[1],\n              verified: true,\n            }\n            User.mergeAccounts(profile, data, 'githubId', (err, user) => {\n              done(err, user)\n            })\n          }\n        })\n        .catch((err) => {\n          console.error(err)\n          done(err, null)\n        })\n    }),\n  )\n  // Facebook Strategy\n  const facebookClientID = process.env.facebook_clientid\n  const facebookClientSecret = process.env.facebook_client_secret\n  const facebookOpts = {\n    callbackURL: '/api/auth/facebook/redirect',\n    clientID: facebookClientID,\n    clientSecret: facebookClientSecret,\n    profileFields: ['id', 'emails', 'name'],\n  }\n  passport.use(\n    new FacebookStrategy(facebookOpts, (accessToken, refreshToken, profile, done) => {\n      User.findOne({ facebookId: profile.id })\n        .then((currentUser) => {\n          if (currentUser) {\n            done(null, currentUser)\n          } else {\n            // Sometimes, the user has their email access set to private\n            // In that case, we save their id instead\n            const emailData = profile._json.email === null ? profile.id : profile._json.email\n            const data = {\n              facebookId: profile.id,\n              email: emailData,\n              firstName: profile._json.first_name,\n              lastName: profile._json.last_name,\n              verified: true,\n            }\n            User.mergeAccounts(profile, data, 'facebookId', (err, user) => {\n              done(err, user)\n            })\n          }\n        })\n        .catch((err) => {\n          console.error(err)\n          done(err, null)\n        })\n    }),\n  )\n}\n",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/passport.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "passportJwt",
    "memberof": "ttuacm-backend/src/auth/config/passport.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/passport.js~passportJwt",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/passport.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "ExtractJwt",
    "memberof": "ttuacm-backend/src/auth/config/passport.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/passport.js~ExtractJwt",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/passport.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "passportGoogle",
    "memberof": "ttuacm-backend/src/auth/config/passport.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/passport.js~passportGoogle",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/passport.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "passportGitHub",
    "memberof": "ttuacm-backend/src/auth/config/passport.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/passport.js~passportGitHub",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/passport.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "passportFacebook",
    "memberof": "ttuacm-backend/src/auth/config/passport.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/passport.js~passportFacebook",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/passport.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "JwtStrategy",
    "memberof": "ttuacm-backend/src/auth/config/passport.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/passport.js~JwtStrategy",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/passport.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "GoogleStrategy",
    "memberof": "ttuacm-backend/src/auth/config/passport.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/passport.js~GoogleStrategy",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/passport.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "GitHubStrategy",
    "memberof": "ttuacm-backend/src/auth/config/passport.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/passport.js~GitHubStrategy",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/passport.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "FacebookStrategy",
    "memberof": "ttuacm-backend/src/auth/config/passport.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/passport.js~FacebookStrategy",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/passport.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "User",
    "memberof": "ttuacm-backend/src/auth/config/passport.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/passport.js~User",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/passport.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "passport",
    "memberof": "ttuacm-backend/src/auth/config/passport.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/auth/config/passport.js~passport",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/config/passport.js",
    "importStyle": "passport",
    "description": "Uses a JWT stategy to verify the token",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "passport",
        "description": "I'm not really sure. It's pretty magical tbh"
      }
    ]
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "ttuacm-backend/src/auth/index.js",
    "content": "const auth = require('./auth.app');\n\nmodule.exports = auth;\n",
    "static": true,
    "longname": "ttuacm-backend/src/auth/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "auth",
    "memberof": "ttuacm-backend/src/auth/index.js",
    "static": true,
    "longname": "ttuacm-backend/src/auth/index.js~auth",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/auth/index.js",
    "importStyle": "auth",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "ttuacm-backend/src/contacts/contacts.app.js",
    "content": "const express = require('express');\nconst router = require('./contacts.router');\n\nconst app = express();\napp.use('/api/v2', router);\n\nmodule.exports = app;\n",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.app.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "express",
    "memberof": "ttuacm-backend/src/contacts/contacts.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.app.js~express",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/contacts.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "router",
    "memberof": "ttuacm-backend/src/contacts/contacts.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.app.js~router",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/contacts.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "app",
    "memberof": "ttuacm-backend/src/contacts/contacts.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.app.js~app",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/contacts.app.js",
    "importStyle": "app",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "ttuacm-backend/src/contacts/contacts.controller.js",
    "content": "const Contacts = require('./contacts.model');\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nclass ContactsController {\n  constructor() {\n    this.DB = new Contacts()\n  }\n\n  addUserToGoogleContacts(email, topics, otherTopic) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const finalGroups = []; // Will hold all of the resource names for requested topics\n        // Find user from database\n        const user = await this.DB.findOrCreateContactByEmail(email);\n\n        // Delete user's previous group associations\n        for (const groupName of user.sdcGroupResourceNames) {\n          const missing = await this.DB.deleteContactfromGroup(user.userResourceName, groupName);\n          if (missing) console.error(`Cannot find contact ${missing[0]}`);\n        }\n\n        // Add all the new group associations\n        for (const topic of topics) {\n          let groupResourceName;\n\n          if (['other', 'Other'].includes(topic)) {\n            const saveExactName = true\n            const { resourceName } = await this.DB.findOrCreateGroupByName('Other', saveExactName);\n            // TODO: Send ACM emails of topic requests\n            // await Contacts.sendGroupRequest(otherTopic, email)\n            console.log(otherTopic)\n            groupResourceName = resourceName;\n          } else {\n            const { resourceName } = await this.DB.findOrCreateGroupByName(topic);\n            groupResourceName = resourceName;\n          }\n          console.log('found/creaotherTopicted group:', groupResourceName);\n\n          await sleep(5000);\n\n          const missing = await this.DB.addContactToGroup(user.userResourceName, groupResourceName);\n          if (missing) console.error(missing);\n          console.log(`pushing ${groupResourceName} to array`);\n          finalGroups.push(groupResourceName);\n        }\n\n        // update Contacts Model\n        await Contacts.updateContactTopics(email, finalGroups);\n\n        resolve('Contact has been saved and editted successfully');\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n}\n\nmodule.exports = ContactsController;\n",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "Contacts",
    "memberof": "ttuacm-backend/src/contacts/contacts.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.controller.js~Contacts",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/contacts.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "sleep",
    "memberof": "ttuacm-backend/src/contacts/contacts.controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.controller.js~sleep",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/contacts.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "ms",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "class",
    "name": "ContactsController",
    "memberof": "ttuacm-backend/src/contacts/contacts.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.controller.js~ContactsController",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/contacts.controller.js",
    "importStyle": "ContactsController",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 130,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ttuacm-backend/src/contacts/contacts.controller.js~ContactsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/contacts/contacts.controller.js~ContactsController#constructor",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "DB",
    "memberof": "ttuacm-backend/src/contacts/contacts.controller.js~ContactsController",
    "static": false,
    "longname": "ttuacm-backend/src/contacts/contacts.controller.js~ContactsController#DB",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "addUserToGoogleContacts",
    "memberof": "ttuacm-backend/src/contacts/contacts.controller.js~ContactsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/contacts/contacts.controller.js~ContactsController#addUserToGoogleContacts",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "email",
        "types": [
          "*"
        ]
      },
      {
        "name": "topics",
        "types": [
          "*"
        ]
      },
      {
        "name": "otherTopic",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "ttuacm-backend/src/contacts/contacts.errors.js",
    "content": "",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.errors.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "file",
    "name": "ttuacm-backend/src/contacts/contacts.model.js",
    "content": "const { google } = require('googleapis');\nconst mongoose = require('mongoose');\n\nconst contactsSchema = mongoose.Schema({\n  // User's email\n  email: { type: String, required: true, unique: true },\n  // User's resource name according to Google People API\n  userResourceName: { type: String, default: '' },\n  // User's etag which is used for changing data\n  etag: { type: String, default: '' },\n  // User's group resourceName\n  sdcGroupResourceNames: { type: [String], default: [] },\n})\n\n/**\n * Formats the group name given to match the semester and year\n *\n * @param {string} groupName - the name for the group\n * @param {boolean} exact - whether or not to save the exact name of the group name\n */\nconst formatGroupName = (groupName, exact = false) => {\n  let formattedName = groupName;\n\n  if (exact) {\n    console.log('saving the exact name ', groupName);\n  } else {\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth();\n    const currentYear = currentDate.getYear();\n\n    // May - December is considered Fall, everything else is Spring\n    const season = currentMonth > 4 && currentMonth <= 11 ? 'Fall' : 'Spring';\n\n    // Gets the last two digits of the year\n    const year = currentYear.toString().slice(1, 3);\n\n    formattedName = `SDC - ${groupName} - ${season} ${year}`;\n  }\n\n  return formattedName;\n}\n\nclass ContactsModel {\n  /**\n   * Create the Contacts Object for the rest of the functions to use\n   * @requires oAuth2Client to be defined and valid. This can be acheived by running\n   * ```\n   require('</path/to/>oauth2.config.js').loadCredentials().```\n   */\n  constructor() {\n    const OAuth2Client = null // TODO: Grab OAuthClient from the Auth Service\n    try {\n      // Google People API manager\n      this.API = google.people({ version: 'v1', auth: OAuth2Client })\n      this.DB = mongoose.model('Contacts', contactsSchema)\n    } catch (err) {\n      console.error(err)\n      return err\n    }\n  }\n\n  /**\n   * Finds or creates a contact by email\n   * If a user is not found in the database, we will check Google Contacts\n   * If no contact is found in Google Contacts, we will create one and save\n   * the data from the created contact into the database\n   *\n   * The important data to save is the etag, so that we can modify it later\n   *\n   * @param {string} email - email to add\n   *\n   * @return {Promise<Object, Error>} - a user object from the database, not from Contacts\n   */\n  findOrCreateContactByEmail(email) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let userExistDb = false;\n        let userExistContacts = false;\n\n        // Check for existance of user in DB\n        const user = await this.DB.findOne({ email });\n        userExistDb = Boolean(user)\n\n        // Check for existance of user in Contacts\n        const connectionOptions = {\n          resourceName: 'people/me',\n          personFields: 'emailAddresses,memberships',\n          pageSize: 2000,\n        }\n        const { data } = await this.API.people.connections.list(connectionOptions);\n        const matchingUser = data.connections.filter((each) => {\n          let exists = false;\n          for (let i = 0; i < each.emailAddresses.length; i += 1) {\n            if (email === each.emailAddresses[i].value) {\n              exists = true;\n              console.log('equal');\n              break;\n            }\n          }\n          return exists;\n        });\n        if (matchingUser.length > 0) userExistContacts = true;\n\n        let targetUser;\n        // Add the Contact to the db\n        if (!userExistDb && userExistContacts) {\n          if (matchingUser.length > 1) console.error(`Warning, there are duplicate emails`);\n          console.log('cannot find user in db');\n          const { resourceName, email: matchingEmail, etag } = matchingUser[0];\n          const sdcGroupResourceNames = matchingUser[0].memberships.map((each) => each.contactGroupMembership.contactGroupId);\n          const options = {\n            email: matchingEmail,\n            userResourceName: resourceName,\n            etag,\n            sdcGroupResourceNames,\n          };\n          const newUser = await (new this.DB(options)).save();\n          targetUser = newUser.toObject();\n          // Add the db user to Contacts and overwrite\n        } else if (userExistDb && !userExistContacts) {\n          console.log('cannot find user in Contacts');\n          const { email: userEmail } = user;\n          const createContactOptions = {\n            requestBody: {\n              emailAddresses: [\n                {\n                  value: userEmail,\n                },\n              ],\n            },\n          };\n          const { data: createdContact } = await this.API.people.createContact(createContactOptions);\n          const query = { email: userEmail };\n          const update = {\n            etag: createdContact.etag,\n            userResourceName: createdContact.resourceName,\n          };\n          const options = { new: true };\n          const newUser = await this.DB.findOneAndUpdate(query, update, options);\n          targetUser = newUser.toObject();\n          // Create a contact and save to database\n        } else if (!userExistDb && !userExistContacts) {\n          console.log('cannot find user anywhere');\n          const createContactOptions = {\n            requestBody: {\n              emailAddresses: [\n                {\n                  value: email,\n                },\n              ],\n            },\n          };\n          const { data: createdContact } = await this.API.people.createContact(createContactOptions);\n          const options = {\n            email,\n            etag: createdContact.etag,\n            userResourceName: createdContact.resourceName,\n          };\n          const newUser = await (new this.DB(options)).save();\n          targetUser = newUser.toObject();\n        } else {\n          console.log('user is everywhere!');\n          targetUser = user;\n        }\n        resolve(targetUser);\n      } catch (err) {\n        reject(err);\n      }\n    })\n  }\n\n  /**\n   * Finds a group by a given name\n   *\n   * @param {string} name - unformatted name of the group\n   * @return {Promise<Object, Error>} - resolves with the complete Contact Group Object\n   */\n  findOrCreateGroupByName(name) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const formattedName = formatGroupName(name);\n        const { data } = await this.API.contactGroups.list();\n        const matchingGroups = data.contactGroups.filter(group => group.formattedName === formattedName);\n\n        if (matchingGroups.length !== 0) {\n          resolve(matchingGroups[0]);\n        } else {\n          const options = {\n            requestBody: {\n              contactGroup: {\n                name: formattedName,\n              },\n            },\n          };\n          const { data: group } = await this.API.contactGroups.create(options);\n          resolve(group);\n        }\n      } catch (err) {\n        console.error(err)\n        reject()\n      }\n    })\n  }\n\n  /**\n   * Adds a user to the Contact Group - Cannot be Other - Other handled differently\n   *\n   * @param {string} userResourceName - the user's resourceName\n   * @param {string} groupResourceName - the topic of interest\n   * @param {string} otherTopic - given when the user wants a different topic\n   *\n   * @return {Promise<Object, Error>} - resolves with the complete Contact Group Object\n   */\n  addContactToGroup(userResourceName, groupResourceName) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const options = {\n          resourceName: groupResourceName,\n          requestBody: {\n            resourceNamesToAdd: [userResourceName],\n          },\n        };\n        await this.API.contactGroups.members.modify(options);\n        console.log(`Added ${userResourceName} to ${groupResourceName}`);\n        resolve();\n      } catch (err) {\n        reject(err);\n      }\n    })\n  }\n\n  /**\n   * Deletes the user from the groups given\n   *\n   * @param {string} userResourceName - the user's resourceName\n   * @param {string} groupResourceNames - the group to delete from\n   */\n  deleteContactfromGroup(userResourceName, groupResourceName){\n    return new Promise(async (resolve, reject) => {\n      try {\n        const options = {\n          resourceName: groupResourceName,\n          requestBody: {\n            resourceNamesToRemove: [userResourceName],\n          },\n        };\n        await this.API.contactGroups.members.modify(options);\n        resolve();\n      } catch (err) {\n        reject(err);\n      }\n    })\n  }\n\n  /**\n   * Finds a group given a name, if one is not found, we will create one\n   *\n   * @param {string} name - name of the group to find\n   * @return {Promise<Object, Error>} returns the resourceName for the group\n   */\n  findGroupByName(name) {\n    const formattedName = formatGroupName(name);\n    return new Promise(async (resolve, reject) => {\n      try {\n        // Check for existing group\n        const { data } = await this.API.contactGroups.list();\n        // The list of Groups\n        const { contactGroups: listOfGroups } = data;\n        // Check for existing name\n        const matchingGroups = listOfGroups.filter(group => group.formattedName === formattedName);\n\n        if (matchingGroups.length !== 0) {\n          resolve(matchingGroups[0].resourceName);\n        } else {\n          const options = {\n            requestBody: {\n              contactGroup: {\n                name: formattedName,\n              },\n            },\n          };\n          const newGroup = await this.API.contactGroups.create(options);\n          resolve(newGroup.resourceName);\n        }\n      } catch (err) {\n        reject(err);\n      }\n    });\n  };\n\n  /**\n   * Replace the contact's interest groups in database based on their email\n   *\n   * @param {string} email - user's email\n   * @param {Array<string>} groups - resource names for the groups\n   *\n   * @return {Promise<never>}\n   */\n  updateContactTopics(email, groups){\n    return new Promise(async (resolve, reject) => {\n      console.log('updating db...');\n      // TODO: not updating groups\n      try {\n        const query = { email };\n        const update = { sdcGroupResourceNames: groups };\n        const options = { new: true };\n        const updatedUser = await this.DB.findOneAndUpdate(query, update, options);\n        resolve(updatedUser);\n      } catch (err) {\n        reject(err);\n      }\n    })\n  }\n}\n\n\n\n\n\n\nexports = ContactsModel\n",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.model.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "google",
    "memberof": "ttuacm-backend/src/contacts/contacts.model.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.model.js~google",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/contacts.model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "ttuacm-backend/src/contacts/contacts.model.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.model.js~mongoose",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/contacts.model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "contactsSchema",
    "memberof": "ttuacm-backend/src/contacts/contacts.model.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.model.js~contactsSchema",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/contacts.model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "formatGroupName",
    "memberof": "ttuacm-backend/src/contacts/contacts.model.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.model.js~formatGroupName",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/contacts.model.js",
    "importStyle": null,
    "description": "Formats the group name given to match the semester and year",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "groupName",
        "description": "the name for the group"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "exact",
        "description": "whether or not to save the exact name of the group name"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "class",
    "name": "ContactsModel",
    "memberof": "ttuacm-backend/src/contacts/contacts.model.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/contacts.model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 140,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel#constructor",
    "access": null,
    "description": "Create the Contacts Object for the rest of the functions to use",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "oAuth2Client to be defined and valid. This can be acheived by running\n```\nrequire('</path/to/>oauth2.config.js').loadCredentials().```"
      }
    ],
    "params": []
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "API",
    "memberof": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel",
    "static": false,
    "longname": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel#API",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "DB",
    "memberof": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel",
    "static": false,
    "longname": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel#DB",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "findOrCreateContactByEmail",
    "memberof": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel#findOrCreateContactByEmail",
    "access": null,
    "description": "Finds or creates a contact by email\nIf a user is not found in the database, we will check Google Contacts\nIf no contact is found in Google Contacts, we will create one and save\nthe data from the created contact into the database\n\nThe important data to save is the etag, so that we can modify it later",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "email to add"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "a user object from the database, not from Contacts"
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "findOrCreateGroupByName",
    "memberof": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel#findOrCreateGroupByName",
    "access": null,
    "description": "Finds a group by a given name",
    "lineNumber": 178,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "unformatted name of the group"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "resolves with the complete Contact Group Object"
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "addContactToGroup",
    "memberof": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel#addContactToGroup",
    "access": null,
    "description": "Adds a user to the Contact Group - Cannot be Other - Other handled differently",
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userResourceName",
        "description": "the user's resourceName"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "groupResourceName",
        "description": "the topic of interest"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "otherTopic",
        "description": "given when the user wants a different topic"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "resolves with the complete Contact Group Object"
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "deleteContactfromGroup",
    "memberof": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel#deleteContactfromGroup",
    "access": null,
    "description": "Deletes the user from the groups given",
    "lineNumber": 238,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userResourceName",
        "description": "the user's resourceName"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "groupResourceNames",
        "description": "the group to delete from"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "findGroupByName",
    "memberof": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel#findGroupByName",
    "access": null,
    "description": "Finds a group given a name, if one is not found, we will create one",
    "lineNumber": 261,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the group to find"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "returns the resourceName for the group"
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "updateContactTopics",
    "memberof": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/contacts/contacts.model.js~ContactsModel#updateContactTopics",
    "access": null,
    "description": "Replace the contact's interest groups in database based on their email",
    "lineNumber": 299,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "user's email"
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "groups",
        "description": "resource names for the groups"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<never>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "ttuacm-backend/src/contacts/contacts.router.js",
    "content": "const express = require('express');\nconst { membersOnlyRoute } = require('../utils/protected-route');\n\n// Controller\nconst ctrl = require('./contacts.controller');\n\nconst router = express.Router();\n\n/**\n * Testing route for the Email Service\n *\n * - Endpoint: `/contacts/api/v2`\n * - Verb: GET\n *\n * @typedef {function} ContactsRouter\n */\nrouter.get('/', (req, res) => {\n  res.send('Contacts App Works!');\n});\n\n/**\n * Single Endpoint for front end\n * Adds the given email to the SDC Group with their interests as a label\n *\n * - Restricted\n * - Endpoint: `/contacts/add-to-google-group`\n * - Verb: PUT\n *\n * @requires Authentication - JWT\n * @param {object} req - Express Request Object\n * @param {string} req.body.email - user's email\n * @param {string} req.body.topics - array of topic of interests\n * @param {string} req.body.otherTopic - user's request for a topic\n *\n */\nrouter.put('/', membersOnlyRoute, async (req, res) => {\n  try {\n    const { email, topics, otherTopic } = req.body;\n    // if (!email || !topics || !otherTopic) throw new Error('Missing required variable')\n    await ctrl.addUserToGoogleContacts(email, topics, otherTopic);\n    res.status(200).end();\n  } catch (err) {\n    console.error(err.errors[0].message);\n    res.status(err.code || 404).json({ err: err.message });\n  }\n});\n\nmodule.exports = router;\n",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.router.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "express",
    "memberof": "ttuacm-backend/src/contacts/contacts.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.router.js~express",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/contacts.router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "membersOnlyRoute",
    "memberof": "ttuacm-backend/src/contacts/contacts.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.router.js~membersOnlyRoute",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/contacts.router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "ctrl",
    "memberof": "ttuacm-backend/src/contacts/contacts.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.router.js~ctrl",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/contacts.router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "typedef",
    "name": "ContactsRouter",
    "memberof": "ttuacm-backend/src/contacts/contacts.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.router.js~ContactsRouter",
    "access": null,
    "description": "Testing route for the Email Service\n\n- Endpoint: `/contacts/api/v2`\n- Verb: GET",
    "lineNumber": 17,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ContactsRouter"
    }
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "router",
    "memberof": "ttuacm-backend/src/contacts/contacts.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.router.js~router",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/contacts.router.js",
    "importStyle": "router",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "typedef",
    "name": "ContactsRouter",
    "memberof": "ttuacm-backend/src/contacts/contacts.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/contacts.router.js~ContactsRouter",
    "access": null,
    "description": "Testing route for the Email Service\n\n- Endpoint: `/contacts/api/v2`\n- Verb: GET",
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ContactsRouter"
    }
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "ttuacm-backend/src/contacts/index.js",
    "content": "const contacts = require('./contacts.app');\n\nmodule.exports = contacts;\n",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "contacts",
    "memberof": "ttuacm-backend/src/contacts/index.js",
    "static": true,
    "longname": "ttuacm-backend/src/contacts/index.js~contacts",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/contacts/index.js",
    "importStyle": "contacts",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "file",
    "name": "ttuacm-backend/src/email/email.app.js",
    "content": "const functions = require('firebase-functions')\nconst express = require('express')\nconst router = require('./email.router')\n\nconst app = express()\n\nconst { environment, email } = functions.config()\nprocess.env = email\nprocess.env.NODE_ENV = environment.env\n\napp.use('/api/v2', router)\n\nmodule.exports = app\n",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.app.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "functions",
    "memberof": "ttuacm-backend/src/email/email.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.app.js~functions",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/email/email.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "express",
    "memberof": "ttuacm-backend/src/email/email.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.app.js~express",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/email/email.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "name": "router",
    "memberof": "ttuacm-backend/src/email/email.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.app.js~router",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/email/email.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "variable",
    "name": "environment",
    "memberof": "ttuacm-backend/src/email/email.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.app.js~environment",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/email/email.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "app",
    "memberof": "ttuacm-backend/src/email/email.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.app.js~app",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/email/email.app.js",
    "importStyle": "app",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "ttuacm-backend/src/email/email.controller.js",
    "content": "const nodemailer = require('nodemailer')\n\n/**\n * Handles sending emails to students\n */\nclass EmailController {\n  /**\n   * Sets the protocol and host for all links in the emails\n   * @param {string} protocol protocol of host [http, https]\n   * @param {string} host host of host [localhost, acmttu.org]\n   */\n  constructor(protocol, host) {\n    if (!protocol) {\n      throw new Error('Did not pass a protocol')\n    } else if (!host) {\n      throw new Error('Did not pass a host')\n    }\n\n    this.protocol = protocol\n    this.host = host\n    this.mailbox = process.env.email_username\n\n    if (process.env.NODE_ENV !== 'prod') {\n      this.smtpTransporter = nodemailer.createTransport({\n        host: 'smtp.ethereal.email',\n        port: 587,\n        auth: {\n          user: 'fr3yjbymylwvbkc6@ethereal.email',\n          pass: 'sCvgzSPfhssNBEH3TQ',\n        },\n        tls: {\n          // do not fail on invalid certs\n          rejectUnauthorized: false,\n        },\n      })\n    } else {\n      this.smtpTransporter = nodemailer.createTransport({\n        service: 'Gmail',\n        auth: {\n          user: process.env.email_username,\n          pass: process.env.email_password,\n        },\n        tls: {\n          // do not fail on invalid certs\n          rejectUnauthorized: false,\n        },\n      })\n    }\n  }\n\n  /**\n   * Sends Reset Password email\n   *\n   * @param {string} email user's email\n   * @param {string} token HEX token/reset token\n   * @returns {Promise.<null, Error>} Rejects with an error if there is something wrong with the email\n   * @todo Make this look cleaner\n   */\n  sendResetEmail(token, email) {\n    return new Promise((resolve, reject) => {\n      const mailOptions = {\n        to: email,\n        from: 'Texas Tech ACM',\n        subject: 'TTU ACM Password Reset',\n        html: `<p>You are receiving this because you (or someone else) have requested the reset of the password for your account.\\n\\nPlease click on the following link, or paste this into your browser to complete the process:\\n\\n</p>\\n\\n<a>${\n          this.protocol\n        }://${\n          this.host\n        }/api/users/reset/${token}</a>\\n\\n<p>If you did not request this, please ignore this email and your password will remain unchanged.</p>\\n`,\n      }\n      this.smtpTransporter.sendMail(mailOptions, (err) => {\n        if (err) {\n          console.error(err)\n          reject(err)\n        }\n        console.log(`Email send to ${email}`)\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * Send the notification to the user that informtion in their account has changed\n   *\n   * @param {string} email user's email\n   * @returns {Promise.<null, Error>} Rejects with an error if there is something wrong with the email\n   */\n  sendChangedPasswordEmail(email) {\n    return new Promise((resolve, reject) => {\n      const mailOptions = {\n        to: email,\n        from: this.mailbox,\n        subject: 'Your password has been changed',\n        text:\n          'Hello,\\n\\n'\n          + 'This is a confirmation that the password for your account has been changed.\\n',\n      }\n      this.smtpTransporter.sendMail(mailOptions, (err) => {\n        if (err) {\n          console.error(err)\n          reject(err)\n        }\n        console.log(`Email send to ${email}`)\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * Sends a question to the mailbox\n   *\n   * @param {Object} options options object\n   * @param {string} options.name student name\n   * @param {string} options.email student email\n   * @param {string} options.topic student topic\n   * @param {string} options.message student message\n   * @returns {Promise.<null, Error>}\n   */\n  contactUs(options) {\n    return new Promise((resolve, reject) => {\n      const mailOptions = {\n        from: options.email,\n        to: this.mailbox,\n        subject: 'ACM Question',\n        text: `You got a message!\\n\\nSender: ${options.name}\\n\\nEmail: ${options.email}\\n\\nTopic: ${\n          options.topic\n        }\\n\\nMessage: ${options.message}\\n`,\n      }\n      this.smtpTransporter.sendMail(mailOptions, (err) => {\n        if (err) {\n          console.error(err)\n          reject(err)\n        }\n        console.log(`Email send to ${this.mailbox}`)\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * Sends a confirmation email to the user with a link/endpoint\n   * and their token to verify their email\n   *\n   * @param {string} email user's email\n   * @param {string} token user's HEX token saved in the auth database\n   * @returns {Promise.<null, Error>}\n   */\n  sendConfirmationEmail(email, token) {\n    return new Promise((resolve, reject) => {\n      const mailOptions = {\n        to: email,\n        from: 'Texas Tech ACM',\n        subject: 'Welcome to ACM: TTU',\n        html: `<p>Please click on the following link, or paste this into your browser to verify your account:</p>\\n\\n<a>${\n          this.protocol\n        }://${\n          this.host\n        }/api/users/confirm/${token}</a>\\n\\n<p>If you did not sign up for an account, please ignore this email.</p>\\n`,\n      }\n      this.smtpTransporter.sendMail(mailOptions, (err) => {\n        if (err) {\n          console.error(err)\n          reject(err)\n        }\n        console.log(`Email send to ${email}`)\n        resolve()\n      })\n    })\n  }\n}\n\nexports = EmailController\n",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "variable",
    "name": "nodemailer",
    "memberof": "ttuacm-backend/src/email/email.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.controller.js~nodemailer",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/email/email.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "class",
    "name": "EmailController",
    "memberof": "ttuacm-backend/src/email/email.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.controller.js~EmailController",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/email/email.controller.js",
    "importStyle": null,
    "description": "Handles sending emails to students",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 167,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ttuacm-backend/src/email/email.controller.js~EmailController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/email/email.controller.js~EmailController#constructor",
    "access": null,
    "description": "Sets the protocol and host for all links in the emails",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "protocol",
        "description": "protocol of host [http, https]"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "host",
        "description": "host of host [localhost, acmttu.org]"
      }
    ]
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "protocol",
    "memberof": "ttuacm-backend/src/email/email.controller.js~EmailController",
    "static": false,
    "longname": "ttuacm-backend/src/email/email.controller.js~EmailController#protocol",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "host",
    "memberof": "ttuacm-backend/src/email/email.controller.js~EmailController",
    "static": false,
    "longname": "ttuacm-backend/src/email/email.controller.js~EmailController#host",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "mailbox",
    "memberof": "ttuacm-backend/src/email/email.controller.js~EmailController",
    "static": false,
    "longname": "ttuacm-backend/src/email/email.controller.js~EmailController#mailbox",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "smtpTransporter",
    "memberof": "ttuacm-backend/src/email/email.controller.js~EmailController",
    "static": false,
    "longname": "ttuacm-backend/src/email/email.controller.js~EmailController#smtpTransporter",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "smtpTransporter",
    "memberof": "ttuacm-backend/src/email/email.controller.js~EmailController",
    "static": false,
    "longname": "ttuacm-backend/src/email/email.controller.js~EmailController#smtpTransporter",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "sendResetEmail",
    "memberof": "ttuacm-backend/src/email/email.controller.js~EmailController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/email/email.controller.js~EmailController#sendResetEmail",
    "access": null,
    "description": "Sends Reset Password email",
    "lineNumber": 59,
    "todo": [
      "Make this look cleaner"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<null, Error>} Rejects with an error if there is something wrong with the email"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "user's email"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "HEX token/reset token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<null, Error>"
      ],
      "spread": false,
      "description": "Rejects with an error if there is something wrong with the email"
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "sendChangedPasswordEmail",
    "memberof": "ttuacm-backend/src/email/email.controller.js~EmailController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/email/email.controller.js~EmailController#sendChangedPasswordEmail",
    "access": null,
    "description": "Send the notification to the user that informtion in their account has changed",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<null, Error>} Rejects with an error if there is something wrong with the email"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "user's email"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<null, Error>"
      ],
      "spread": false,
      "description": "Rejects with an error if there is something wrong with the email"
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "contactUs",
    "memberof": "ttuacm-backend/src/email/email.controller.js~EmailController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/email/email.controller.js~EmailController#contactUs",
    "access": null,
    "description": "Sends a question to the mailbox",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<null, Error>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.name",
        "description": "student name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.email",
        "description": "student email"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.topic",
        "description": "student topic"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.message",
        "description": "student message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<null, Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "sendConfirmationEmail",
    "memberof": "ttuacm-backend/src/email/email.controller.js~EmailController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/email/email.controller.js~EmailController#sendConfirmationEmail",
    "access": null,
    "description": "Sends a confirmation email to the user with a link/endpoint\nand their token to verify their email",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<null, Error>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "user's email"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "user's HEX token saved in the auth database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<null, Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "ttuacm-backend/src/email/email.router.js",
    "content": "const express = require('express')\n\nconst router = express.Router()\n\n// Controller\nconst Controller = require('./email.controller')\n\n/**\n * Testing route for the Email Service\n *\n * - Endpoint: `/email/api/v2`\n * - Verb: GET\n *\n * @typedef {function} EmailRouter\n */\nrouter.get('/', (req, res) => {\n  res.send('Email App Works!')\n})\n\n/**\n * Sends and question to ACM Email\n *\n * - Endpoint: `/email/api/v2/contact-us`\n * - Verb: POST\n *\n * @typedef {function} EmailRouter-contactUs\n */\nrouter.post('/contact-us', (req, res) => {\n  const ctrl = new Controller(req.protocol, req.headers.host)\n  const { name, email, topic, message } = req.body\n  const emailInfo = { name, email, topic, message }\n\n  ctrl.contactUs(emailInfo)\n    .then(() => res.status(200).json())\n    .catch(err => {\n      console.error(err)\n      res.status(404).json()\n    })\n})\n\n/**\n * Sends a confirmation email to the user with a link/endpoint\n * to verify their email. Users will click the link to verify\n * thier emails and should be redirected to the login page\n *\n * - Endpoint: `/email/api/v2/confirm-email`\n * - Verb: POST\n *\n * @typedef {function} EmailRouter-sendConfirmationEmail\n */\nrouter.post('/confirm-email', (res, req) => {\n  const ctrl = new Controller(req.protocol, req.headers.host)\n  const { token, email } = req.body\n\n  ctrl.sendConfirmationEmail(email, token)\n    .then(() => res.status(200).json())\n    .catch(err => {\n      console.error(err)\n      res.status(404).json()\n    })\n})\n\n/**\n * Sends a reset password email to the user\n * The user should be able to click on the\n * link sent and redirected to the reset\n * password page\n *\n * - Endpoint: `/email/api/v2/reset-password`\n * - Verb: POST\n *\n * @typedef {function} EmailRouter-sendResetEmail\n */\nrouter.post('/reset-password', (res, req) => {\n  const ctrl = new Controller(req.protocol, req.headers.host)\n  const { email, token } = req.body\n\n  ctrl.sendResetEmail(email, token)\n    .then(() => res.status(200).json())\n    .catch(err => {\n      console.error(err)\n      res.status(404).json()\n    })\n})\n\n/**\n * Notifies the user that their password has been changed\n *\n * - Endpoint: `/email/api/v2/change-password-notif`\n * - Verb: POST\n *\n * @typedef {function} EmailRouter-sendChangedPasswordNotification\n */\nrouter.post('/change-password-notif', (res, req) => {\n  const ctrl = new Controller(req.protocol, req.headers.host)\n  const { email, token } = req.body\n\n  ctrl.sendConfirmationEmail(email, token)\n    .then(() => res.status(200).json())\n    .catch(err => {\n      console.error(err)\n      res.status(404).json()\n    })\n})\n\nmodule.exports = router\n",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.router.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "name": "express",
    "memberof": "ttuacm-backend/src/email/email.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.router.js~express",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/email/email.router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "Controller",
    "memberof": "ttuacm-backend/src/email/email.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.router.js~Controller",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/email/email.router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "typedef",
    "name": "EmailRouter",
    "memberof": "ttuacm-backend/src/email/email.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.router.js~EmailRouter",
    "access": null,
    "description": "Testing route for the Email Service\n\n- Endpoint: `/email/api/v2`\n- Verb: GET",
    "lineNumber": 16,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "EmailRouter"
    }
  },
  {
    "__docId__": 181,
    "kind": "typedef",
    "name": "EmailRouter-contactUs",
    "memberof": "ttuacm-backend/src/email/email.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.router.js~EmailRouter-contactUs",
    "access": null,
    "description": "Sends and question to ACM Email\n\n- Endpoint: `/email/api/v2/contact-us`\n- Verb: POST",
    "lineNumber": 28,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "EmailRouter-contactUs"
    }
  },
  {
    "__docId__": 182,
    "kind": "typedef",
    "name": "EmailRouter-sendConfirmationEmail",
    "memberof": "ttuacm-backend/src/email/email.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.router.js~EmailRouter-sendConfirmationEmail",
    "access": null,
    "description": "Sends a confirmation email to the user with a link/endpoint\nto verify their email. Users will click the link to verify\nthier emails and should be redirected to the login page\n\n- Endpoint: `/email/api/v2/confirm-email`\n- Verb: POST",
    "lineNumber": 51,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "EmailRouter-sendConfirmationEmail"
    }
  },
  {
    "__docId__": 183,
    "kind": "typedef",
    "name": "EmailRouter-sendResetEmail",
    "memberof": "ttuacm-backend/src/email/email.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.router.js~EmailRouter-sendResetEmail",
    "access": null,
    "description": "Sends a reset password email to the user\nThe user should be able to click on the\nlink sent and redirected to the reset\npassword page\n\n- Endpoint: `/email/api/v2/reset-password`\n- Verb: POST",
    "lineNumber": 74,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "EmailRouter-sendResetEmail"
    }
  },
  {
    "__docId__": 184,
    "kind": "typedef",
    "name": "EmailRouter-sendChangedPasswordNotification",
    "memberof": "ttuacm-backend/src/email/email.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.router.js~EmailRouter-sendChangedPasswordNotification",
    "access": null,
    "description": "Notifies the user that their password has been changed\n\n- Endpoint: `/email/api/v2/change-password-notif`\n- Verb: POST",
    "lineNumber": 94,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "EmailRouter-sendChangedPasswordNotification"
    }
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "name": "router",
    "memberof": "ttuacm-backend/src/email/email.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/email.router.js~router",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/email/email.router.js",
    "importStyle": "router",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "ttuacm-backend/src/email/index.js",
    "content": "const email = require('./email.app');\n\nmodule.exports = email;\n",
    "static": true,
    "longname": "ttuacm-backend/src/email/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "email",
    "memberof": "ttuacm-backend/src/email/index.js",
    "static": true,
    "longname": "ttuacm-backend/src/email/index.js~email",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/email/index.js",
    "importStyle": "email",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "file",
    "name": "ttuacm-backend/src/events/events.app.js",
    "content": "const functions = require('firebase-functions')\nconst express = require('express');\nconst router = require('./events.router');\n\nconst app = express();\nconst { environment, events } = functions.config()\nprocess.env = events\nprocess.env.NODE_ENV = environment.env || 'dev'\n\n// Middleware\napp.use('/api/v2', router);\n\nmodule.exports = app;\n",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.app.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "functions",
    "memberof": "ttuacm-backend/src/events/events.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.app.js~functions",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/events/events.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "express",
    "memberof": "ttuacm-backend/src/events/events.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.app.js~express",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/events/events.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "name": "router",
    "memberof": "ttuacm-backend/src/events/events.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.app.js~router",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/events/events.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "variable",
    "name": "environment",
    "memberof": "ttuacm-backend/src/events/events.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.app.js~environment",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/events/events.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "name": "app",
    "memberof": "ttuacm-backend/src/events/events.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.app.js~app",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/events/events.app.js",
    "importStyle": "app",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "ttuacm-backend/src/events/events.controller.js",
    "content": "/**\n * Handles Google Calendar Events Controller\n */\nclass EventsController {\n  /**\n   * Grabs the OAuth2 Provider from Auth Service and creates a calendar object\n   */\n  constructor() {\n    // TODO: initialize OAuth2\n    // We need to grab the OAuth2 Provider by making a call to the Auth Service\n\n    /**\n     * Calendar Object\n     * @type {object}\n     */\n    this.calendar = null\n    /**\n     * Current Attendees for any particular event\n     * @type {Array<object>}\n     */\n    this.currentAttendees = []\n    /**\n     * Calendar of choice from ACM\n     * @type {string}\n     */\n    this.calendarId = 'primary'\n  }\n\n\n  /**\n   * Gets the raw events object\n   *\n   * Rejects with an Error\n   * Resolves with a list of (raw) events (an empty array if nore are found[])\n   * @returns { Promise.<Array, Error> } a Promise\n   */\n  getRawEvents() {\n    return new Promise((resolve, reject) => {\n      this.calendar.events.list(\n        {\n          calendarId: this.calendarId,\n          timeMin: new Date().toISOString(),\n          singleEvents: true,\n          orderBy: 'startTime',\n        },\n        (err, { data }) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(data.items || []);\n          }\n        },\n      );\n    });\n  }\n\n  /**\n   * Lists the next 10 events on the user's primary calendar.\n   *\n   * Rejects with an Error\n   *\n   * Resolves with a list(10) events\n   *\n   * @requires oAuth2Client - Configurations can be found in oauth2.config\n   */\n  listEvents() {\n    return new Promise(async (resolve, reject) => {\n      this.getRawEvents()\n        .then((events) => {\n          // Will store all of the events and return\n          const eventsList = [];\n          // Maps all of the numbers to days\n          const weekday = [\n            'Sunday',\n            'Monday',\n            'Tuesday',\n            'Wednesday',\n            'Thursday',\n            'Friday',\n            'Saturday',\n          ];\n          events.map((event, i) => {\n            const start = event.start.dateTime || event.start.date;\n            const end = event.end.dateTime || event.end.date;\n            // Event Object\n            eventsList.push({\n              id: i + 1,\n              day: `${weekday[new Date(start).getDay()]}`,\n              startTime: start,\n              endTime: end,\n              title: event.summary || '',\n              location: event.location || 'TBA',\n              creator: event.creator.displayName || 'TTU ACM',\n              description: event.description || '',\n              attendees: event.attendees || [],\n              eventId: event.id, // Event ID according to Google\n              allDayEvent: event.start.date !== undefined,\n            })\n            return resolve(eventsList);\n          })\n        })\n        .catch((err) => {\n          reject(err)\n        })\n    })\n  }\n\n  /**\n   * Lists all attendees for an event\n   *\n   * - OnSuccess: Resolves with an array with a null email if empty or the list of attendees\n   * - OnFailure: Rejects with an Error\n   *\n   * @param {string} eventId Event ID\n   * @returns {Promise.<Array<Object>>} A Promise\n   */\n  getAttendees(eventId) {\n    return new Promise((resolve, reject) => {\n      this.calendar.events.get(\n        {\n          calendarId: this.calendarId,\n          eventId,\n        },\n        (err, { data }) => {\n          if (err) {\n            reject(err)\n          } else {\n            resolve(data.attendees || [])\n          }\n        },\n      )\n    })\n  }\n\n  /**\n   * Adds an attendee to an event\n   *\n   * @param {string} eventId the event ID\n   * @param {Array} currentAttendees the current attendees for the event\n   * @param {string} email the user's email\n   * @returns {Promise.<null>} A Promise\n   *\n   * - OnSuccess: Resolves\n   * - OnFailure: Rejects with an Error\n   */\n  addAttendee(eventId, email) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.currentAttendees.push({ email, responseStatus: 'accepted' });\n        resolve();\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * Removes the attendee by their email\n   *\n   * @param {string} email the user's email\n   * @returns {Array<Object>} updated attendee list\n   */\n  removeAttendee(email) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (this.currentAttendees.length === 0) throw new Error('No attendees found');\n        const originalAttendees = this.currentAttendees;\n        this.currentAttendees = this.currentAttendees.filter(each => each.email !== email.toLowerCase());\n        if (originalAttendees.length === this.currentAttendees.length) {\n          throw new Error('No user found');\n        }\n        resolve(this.currentAttendees);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * Replaces the event's attendees with the attendees list\n   * Rejects with an Error\n   * Resolves with the new event object\n   *\n   * Fun Fact: Google's API deletes duplicates by default\n   *\n   * This functionality is already tested by Google.\n   * DO NOT test this function as it interacts with real google calendars\n   *\n   * @requires oAuth2Client - Configurations can be found in oauth2.config\n   * @param {string} eventId user's event ID\n   * @param {Array<Object>} attendees array of attendees\n   * @returns {Promise<Array<Object>>} A Promise\n   */\n  updateAttendee(eventId, attendees) {\n    return new Promise(async (resolve, reject) => {\n      this.calendar.events.patch(\n        {\n          calendarId: this.calendarId,\n          eventId,\n          resource: {\n            attendees,\n          },\n        },\n        (err, { data }) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(data);\n          }\n        },\n      );\n    });\n  }\n}\n\n\nmodule.exports = EventsController;\n",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "class",
    "name": "EventsController",
    "memberof": "ttuacm-backend/src/events/events.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.controller.js~EventsController",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/events/events.controller.js",
    "importStyle": "EventsController",
    "description": "Handles Google Calendar Events Controller",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 196,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ttuacm-backend/src/events/events.controller.js~EventsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/events/events.controller.js~EventsController#constructor",
    "access": null,
    "description": "Grabs the OAuth2 Provider from Auth Service and creates a calendar object",
    "lineNumber": 8,
    "params": []
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "calendar",
    "memberof": "ttuacm-backend/src/events/events.controller.js~EventsController",
    "static": false,
    "longname": "ttuacm-backend/src/events/events.controller.js~EventsController#calendar",
    "access": null,
    "description": "Calendar Object",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "currentAttendees",
    "memberof": "ttuacm-backend/src/events/events.controller.js~EventsController",
    "static": false,
    "longname": "ttuacm-backend/src/events/events.controller.js~EventsController#currentAttendees",
    "access": null,
    "description": "Current Attendees for any particular event",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Array<object>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "calendarId",
    "memberof": "ttuacm-backend/src/events/events.controller.js~EventsController",
    "static": false,
    "longname": "ttuacm-backend/src/events/events.controller.js~EventsController#calendarId",
    "access": null,
    "description": "Calendar of choice from ACM",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "getRawEvents",
    "memberof": "ttuacm-backend/src/events/events.controller.js~EventsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/events/events.controller.js~EventsController#getRawEvents",
    "access": null,
    "description": "Gets the raw events object\n\nRejects with an Error\nResolves with a list of (raw) events (an empty array if nore are found[])",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise.<Array, Error> } a Promise"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        " Promise.<Array, Error> "
      ],
      "spread": false,
      "description": "a Promise"
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "listEvents",
    "memberof": "ttuacm-backend/src/events/events.controller.js~EventsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/events/events.controller.js~EventsController#listEvents",
    "access": null,
    "description": "Lists the next 10 events on the user's primary calendar.\n\nRejects with an Error\n\nResolves with a list(10) events",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "oAuth2Client - Configurations can be found in oauth2.config"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "getAttendees",
    "memberof": "ttuacm-backend/src/events/events.controller.js~EventsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/events/events.controller.js~EventsController#getAttendees",
    "access": null,
    "description": "Lists all attendees for an event\n\n- OnSuccess: Resolves with an array with a null email if empty or the list of attendees\n- OnFailure: Rejects with an Error",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array<Object>>} A Promise"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventId",
        "description": "Event ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array<Object>>"
      ],
      "spread": false,
      "description": "A Promise"
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "addAttendee",
    "memberof": "ttuacm-backend/src/events/events.controller.js~EventsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/events/events.controller.js~EventsController#addAttendee",
    "access": null,
    "description": "Adds an attendee to an event",
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<null>} A Promise\n\n- OnSuccess: Resolves\n- OnFailure: Rejects with an Error"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventId",
        "description": "the event ID"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "currentAttendees",
        "description": "the current attendees for the event"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "the user's email"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<null>"
      ],
      "spread": false,
      "description": "A Promise\n\n- OnSuccess: Resolves\n- OnFailure: Rejects with an Error"
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "removeAttendee",
    "memberof": "ttuacm-backend/src/events/events.controller.js~EventsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/events/events.controller.js~EventsController#removeAttendee",
    "access": null,
    "description": "Removes the attendee by their email",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} updated attendee list"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "the user's email"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "updated attendee list"
    }
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "currentAttendees",
    "memberof": "ttuacm-backend/src/events/events.controller.js~EventsController",
    "static": false,
    "longname": "ttuacm-backend/src/events/events.controller.js~EventsController#currentAttendees",
    "access": null,
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "updateAttendee",
    "memberof": "ttuacm-backend/src/events/events.controller.js~EventsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/events/events.controller.js~EventsController#updateAttendee",
    "access": null,
    "description": "Replaces the event's attendees with the attendees list\nRejects with an Error\nResolves with the new event object\n\nFun Fact: Google's API deletes duplicates by default\n\nThis functionality is already tested by Google.\nDO NOT test this function as it interacts with real google calendars",
    "lineNumber": 194,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "oAuth2Client - Configurations can be found in oauth2.config"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<Object>>} A Promise"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventId",
        "description": "user's event ID"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "attendees",
        "description": "array of attendees"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<Object>>"
      ],
      "spread": false,
      "description": "A Promise"
    }
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "ttuacm-backend/src/events/events.router.js",
    "content": "const express = require('express');\n\nconst controller = require('./events.controller');\n\nconst router = express.Router();\n\nconst { membersOnlyRoute } = require('../utils/protected-route');\n\n/**\n * Testing route for the Events Service\n *\n * - Endpoint: `/events/api/v2/test`\n * - GET\n *\n * @typedef {function} EventsRouter\n */\nrouter.get('/', (req, res) => {\n  res.send('Email App Works!');\n});\n\n/**\n * Gets all the events (formatted) in ACM Google Calendar using an OAuth2 Object\n *\n * - Endpoint: `/events/api/v2/`\n * - GET\n *\n * @typedef {function} EventsRouter-listEvents\n */\nrouter.get('/', (req, res) => {\n  controller\n    .listEvents()\n    .then((events) => {\n      res.status(200).json({ events });\n    })\n    .catch((err) => {\n      if (err) console.log(err);\n      res.status(404).json({ events: [], err });\n    });\n});\n\n/**\n * Gets all attendees for an event\n *\n * - Endpoint `/events/api/v2/attendee?id=userId`\n * - Verb: GET\n *\n * @typedef {function} EventsRouter-getAttendees\n */\nrouter.get('/attendee/:id', (req, res) => {\n  controller\n    .getAttendees(req.params.id)\n    .then((attendees) => {\n      res.status(200).json({ err: null, attendees });\n    })\n    .catch((err) => {\n      console.error(err.errors);\n      res.status(404).json({});\n    });\n});\n\n/**\n * Adds an attendee to the event\n *\n * - Endpoint `/events/api/v2/attendee?id=userId`\n * - Verb: PATCH\n *\n * @param {string} req.body.email - user's email\n * @typedef {function} EventsRouter-addAttendee\n */\nrouter.patch('/attendee/:id', membersOnlyRoute, async (req, res) => {\n  console.log('Add Route');\n  try {\n    const eventId = req.params.id;\n    const currentAttendees = await controller.getAttendees(eventId);\n    const updatedAttendeeList = await controller.addAttendee(currentAttendees, req.body.email);\n    const updatedEvent = await controller.updateAttendee(eventId, updatedAttendeeList);\n    res.status(200).json({ err: null, updatedEvent });\n  } catch (err) {\n    console.error(err);\n    res.status(404).json({ err, updatedEvent: null });\n  }\n});\n\n/**\n * Deletes an attendee for an event\n *\n * - Endpoint `/events/api/v2/attendee?id=userId`\n * - Verb: DELETE\n *\n * @param {string} req.params.id event ID\n * @typedef {function} EventsRouter-removeAttendee\n */\nrouter.delete('/remove-attendee/:id', async (req, res) => {\n  console.log('Remove Route');\n  try {\n    const eventId = req.params.id;\n    const currentAttendees = await controller.getAttendees(eventId);\n    const updatedAttendeeList = await controller.removeAttendee(currentAttendees, req.body.email);\n    const updatedEvent = await controller.updateAttendee(eventId, updatedAttendeeList);\n    res.status(200).json({ err: null, updatedEvent });\n  } catch (err) {\n    console.error(err);\n    res.status(404).json({ err, updatedEvent: null });\n  }\n});\n\n/**\n * Gets all raw event objects: Mainly used for testing\n *\n * - Endpoint `/events/api/v2/raw/`\n * - Verb: GET\n *\n * @typedef {function} EventsRouter-getRawEvents\n */\nrouter.get('/raw', (req, res) => {\n  controller\n    .getRawEvents()\n    .then((events) => {\n      res.status(200).json({ err: null, events });\n    })\n    .catch((err) => {\n      res.status(404).json({ err, events: null });\n    });\n});\n\nmodule.exports = router;\n",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.router.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "variable",
    "name": "express",
    "memberof": "ttuacm-backend/src/events/events.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.router.js~express",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/events/events.router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "variable",
    "name": "controller",
    "memberof": "ttuacm-backend/src/events/events.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.router.js~controller",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/events/events.router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "variable",
    "name": "membersOnlyRoute",
    "memberof": "ttuacm-backend/src/events/events.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.router.js~membersOnlyRoute",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/events/events.router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "typedef",
    "name": "EventsRouter",
    "memberof": "ttuacm-backend/src/events/events.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.router.js~EventsRouter",
    "access": null,
    "description": "Testing route for the Events Service\n\n- Endpoint: `/events/api/v2/test`\n- GET",
    "lineNumber": 17,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "EventsRouter"
    }
  },
  {
    "__docId__": 212,
    "kind": "typedef",
    "name": "EventsRouter-listEvents",
    "memberof": "ttuacm-backend/src/events/events.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.router.js~EventsRouter-listEvents",
    "access": null,
    "description": "Gets all the events (formatted) in ACM Google Calendar using an OAuth2 Object\n\n- Endpoint: `/events/api/v2/`\n- GET",
    "lineNumber": 29,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "EventsRouter-listEvents"
    }
  },
  {
    "__docId__": 213,
    "kind": "typedef",
    "name": "EventsRouter-getAttendees",
    "memberof": "ttuacm-backend/src/events/events.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.router.js~EventsRouter-getAttendees",
    "access": null,
    "description": "Gets all attendees for an event\n\n- Endpoint `/events/api/v2/attendee?id=userId`\n- Verb: GET",
    "lineNumber": 49,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "EventsRouter-getAttendees"
    }
  },
  {
    "__docId__": 214,
    "kind": "typedef",
    "name": "EventsRouter-addAttendee",
    "memberof": "ttuacm-backend/src/events/events.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.router.js~EventsRouter-addAttendee",
    "access": null,
    "description": "Adds an attendee to the event\n\n- Endpoint `/events/api/v2/attendee?id=userId`\n- Verb: PATCH",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "req.body.email",
        "description": "user's email"
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "EventsRouter-addAttendee"
    }
  },
  {
    "__docId__": 215,
    "kind": "typedef",
    "name": "EventsRouter-removeAttendee",
    "memberof": "ttuacm-backend/src/events/events.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.router.js~EventsRouter-removeAttendee",
    "access": null,
    "description": "Deletes an attendee for an event\n\n- Endpoint `/events/api/v2/attendee?id=userId`\n- Verb: DELETE",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "req.params.id",
        "description": "event ID"
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "EventsRouter-removeAttendee"
    }
  },
  {
    "__docId__": 216,
    "kind": "typedef",
    "name": "EventsRouter-getRawEvents",
    "memberof": "ttuacm-backend/src/events/events.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.router.js~EventsRouter-getRawEvents",
    "access": null,
    "description": "Gets all raw event objects: Mainly used for testing\n\n- Endpoint `/events/api/v2/raw/`\n- Verb: GET",
    "lineNumber": 115,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "EventsRouter-getRawEvents"
    }
  },
  {
    "__docId__": 217,
    "kind": "variable",
    "name": "router",
    "memberof": "ttuacm-backend/src/events/events.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/events.router.js~router",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/events/events.router.js",
    "importStyle": "router",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "ttuacm-backend/src/events/index.js",
    "content": "const events = require('./events.app');\n\nmodule.exports = events;\n",
    "static": true,
    "longname": "ttuacm-backend/src/events/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "variable",
    "name": "events",
    "memberof": "ttuacm-backend/src/events/index.js",
    "static": true,
    "longname": "ttuacm-backend/src/events/index.js~events",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/events/index.js",
    "importStyle": "events",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "file",
    "name": "ttuacm-backend/src/profile/index.js",
    "content": "const profile = require('./profile.app');\n\nmodule.exports = profile;\n",
    "static": true,
    "longname": "ttuacm-backend/src/profile/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "name": "profile",
    "memberof": "ttuacm-backend/src/profile/index.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/index.js~profile",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/index.js",
    "importStyle": "profile",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "file",
    "name": "ttuacm-backend/src/profile/profile.app.js",
    "content": "const functions = require('firebase-functions')\nconst express = require('express');\nconst router = require('./profile.router');\n\nconst app = express();\n\nconst { environment, profile } = functions.config()\nprocess.env = profile\nprocess.env.NODE_ENV = environment.env || 'dev'\n\n// Middleware\napp.use('/api/v2', router);\n\nmodule.exports = app;\n",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.app.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "name": "functions",
    "memberof": "ttuacm-backend/src/profile/profile.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.app.js~functions",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/profile.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "name": "express",
    "memberof": "ttuacm-backend/src/profile/profile.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.app.js~express",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/profile.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "variable",
    "name": "router",
    "memberof": "ttuacm-backend/src/profile/profile.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.app.js~router",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/profile.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "variable",
    "name": "environment",
    "memberof": "ttuacm-backend/src/profile/profile.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.app.js~environment",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/profile.app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "variable",
    "name": "app",
    "memberof": "ttuacm-backend/src/profile/profile.app.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.app.js~app",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/profile.app.js",
    "importStyle": "app",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "file",
    "name": "ttuacm-backend/src/profile/profile.controller.js",
    "content": "const ProfileModel = require('./profile.model')\nconst { generateJWTToken } = require('../utils/generate-jwt')\n\nclass ProfileController {\n  constructor() {\n    this.DB = new ProfileModel()\n  }\n\n  /**\n   * Updates the complete user object\n   *\n   * TODO: Have this depend on the Auth service\n   * TODO: Abstract the mongoosejs calls with better higher level methods\n   *\n   * @param {object} newUser new user object\n   * @returns {Promise.<object, Error>} Resolves: a new user object and token  Rejects: Error\n   */\n  updateUser(newUser) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const user = await this.DB.findByIdAndUpdate(newUser._id, newUser, { new: true }).exec()\n        if (!user) reject(new Error('Profile Not Found'))\n        const token = await generateJWTToken(user)\n        const response = { user, token }\n        resolve(response)\n      } catch (err) {\n        reject(err)\n      }\n    })\n  }\n\n  /**\n   * Fetches the user's profile\n   *\n   * @param {string} email - user's unique email\n   * @returns {Promise.<object, Error>} Resolves: a user object  Rejects: Error\n   */\n  getProfile(email) {\n    return new Promise((resolve, reject) => {\n      this.DB.findOne({ email })\n        .then((user) => {\n          if (!user) reject(new Error('Email Not Found'))\n          resolve(user)\n        })\n        .catch((err) => {\n          reject(err)\n        })\n    })\n  }\n}\n\nmodule.exports = ProfileController\n",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "name": "ProfileModel",
    "memberof": "ttuacm-backend/src/profile/profile.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.controller.js~ProfileModel",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/profile.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "variable",
    "name": "generateJWTToken",
    "memberof": "ttuacm-backend/src/profile/profile.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.controller.js~generateJWTToken",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/profile.controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "class",
    "name": "ProfileController",
    "memberof": "ttuacm-backend/src/profile/profile.controller.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.controller.js~ProfileController",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/profile.controller.js",
    "importStyle": "ProfileController",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 232,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ttuacm-backend/src/profile/profile.controller.js~ProfileController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/profile/profile.controller.js~ProfileController#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "DB",
    "memberof": "ttuacm-backend/src/profile/profile.controller.js~ProfileController",
    "static": false,
    "longname": "ttuacm-backend/src/profile/profile.controller.js~ProfileController#DB",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "updateUser",
    "memberof": "ttuacm-backend/src/profile/profile.controller.js~ProfileController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/profile/profile.controller.js~ProfileController#updateUser",
    "access": null,
    "description": "Updates the complete user object\n\nTODO: Have this depend on the Auth service\nTODO: Abstract the mongoosejs calls with better higher level methods",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<object, Error>} Resolves: a new user object and token  Rejects: Error"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "newUser",
        "description": "new user object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<object, Error>"
      ],
      "spread": false,
      "description": "Resolves: a new user object and token  Rejects: Error"
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "getProfile",
    "memberof": "ttuacm-backend/src/profile/profile.controller.js~ProfileController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/profile/profile.controller.js~ProfileController#getProfile",
    "access": null,
    "description": "Fetches the user's profile",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<object, Error>} Resolves: a user object  Rejects: Error"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "user's unique email"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<object, Error>"
      ],
      "spread": false,
      "description": "Resolves: a user object  Rejects: Error"
    }
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "ttuacm-backend/src/profile/profile.model.js",
    "content": "const mongoose = require('mongoose');\n\nconst profileSchema = mongoose.Schema({\n  profileImage: { type: String, default: '' },\n  resume: { type: String, default: '' },\n  email: { type: String, required: true },\n  firstName: { type: String, required: true },\n  lastName: { type: String, required: false },\n  classification: { type: String, required: true, default: 'Other' },\n  hasPaidDues: { type: Boolean, default: false },\n  blocked: { type: Boolean, default: false },\n});\n\nclass Profile {\n  constructor() {\n    this.DB = profileSchema.model('Profiles', profileSchema)\n  }\n}\n\nmodule.exports = Profile;\n",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.model.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "ttuacm-backend/src/profile/profile.model.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.model.js~mongoose",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/profile.model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "variable",
    "name": "profileSchema",
    "memberof": "ttuacm-backend/src/profile/profile.model.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.model.js~profileSchema",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/profile.model.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "class",
    "name": "Profile",
    "memberof": "ttuacm-backend/src/profile/profile.model.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.model.js~Profile",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/profile.model.js",
    "importStyle": "Profile",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 240,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ttuacm-backend/src/profile/profile.model.js~Profile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/profile/profile.model.js~Profile#constructor",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "DB",
    "memberof": "ttuacm-backend/src/profile/profile.model.js~Profile",
    "static": false,
    "longname": "ttuacm-backend/src/profile/profile.model.js~Profile#DB",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "file",
    "name": "ttuacm-backend/src/profile/profile.router.js",
    "content": "const express = require('express')\n\nconst { membersOnlyRoute } = require('../utils/protected-route')\n\nconst router = express.Router()\n\n// Controller\nconst controller = require('./profile.controller')\n\nrouter.get('/', (req, res) => {\n  res.send(`Profile App Works: ${process.env.NODE_ENV}`)\n})\n\n/**\n * Gets the user's profile to fill in a profile page\n * This route requires authentication\n *\n * - endpoint: `/users/profile`\n * - Verb: GET\n *\n * OnFailure: Sends an error statuscode\n * OnSuccess: Sends a success statuscode with an user Object\n *\n * @typedef {function} UserRouter-getProfile\n */\nrouter.get('/profile', membersOnlyRoute, (req, res) => {\n  controller.getProfile(req.user.email)\n    .then((user) => {\n      res.status(200).json({ user, err: null })\n    })\n    .catch((err) => {\n      console.error(err)\n      res.status(404).json({ user: null, err })\n    })\n})\n\n/**\n * Updates the user's resume\n * This route requires authentication\n *\n * - endpoint: `/users/update-resume`\n * - Verb: PUT\n *\n * OnFailure: Sends an error statuscode\n * OnSuccess: Sends a success statuscode with an user Object\n * @deprecated - Use `/users/update-user`\n * @typedef {function} UserRouter-updateResume\n */\nrouter.put('/update-resume', membersOnlyRoute, (req, res) => {\n  controller.updateResume(req.user._id, req.body.path)\n    .then((user) => {\n      res.status(200).json({ user, err: null })\n    })\n    .catch((err) => {\n      console.error(err)\n      res.status(404).json({ user: null, err })\n    })\n})\n\n/**\n * Updates the user's information completely\n * This route requires authentication\n *\n * - endpoint: `/users/update-user`\n * - Verb: PUT\n *\n * OnFailure: Sends an error statuscode\n * OnSuccess: Sends a success statuscode with an user Object\n *\n * @typedef {function} UserRouter-updateUser\n * @param {object} req.body.user A New User object with a ObjectID\n */\nrouter.put('/update-user', membersOnlyRoute, (req, res) => {\n  controller.updateUser(req.body.user)\n    .then((payload) => {\n      res.status(200).json(\n        {\n          user: payload.user,\n          token: payload.token,\n          err: null,\n        },\n      )\n    })\n    .catch((err) => {\n      console.error(err)\n      res.status(404).json(\n        {\n          user: null,\n          token: null,\n          err,\n        },\n      )\n    })\n})\n\nmodule.exports = router\n",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.router.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "express",
    "memberof": "ttuacm-backend/src/profile/profile.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.router.js~express",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/profile.router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "variable",
    "name": "membersOnlyRoute",
    "memberof": "ttuacm-backend/src/profile/profile.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.router.js~membersOnlyRoute",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/profile.router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "variable",
    "name": "controller",
    "memberof": "ttuacm-backend/src/profile/profile.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.router.js~controller",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/profile.router.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "typedef",
    "name": "UserRouter-getProfile",
    "memberof": "ttuacm-backend/src/profile/profile.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.router.js~UserRouter-getProfile",
    "access": null,
    "description": "Gets the user's profile to fill in a profile page\nThis route requires authentication\n\n- endpoint: `/users/profile`\n- Verb: GET\n\nOnFailure: Sends an error statuscode\nOnSuccess: Sends a success statuscode with an user Object",
    "lineNumber": 26,
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "UserRouter-getProfile"
    }
  },
  {
    "__docId__": 247,
    "kind": "typedef",
    "name": "UserRouter-updateResume",
    "memberof": "ttuacm-backend/src/profile/profile.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.router.js~UserRouter-updateResume",
    "access": null,
    "description": "Updates the user's resume\nThis route requires authentication\n\n- endpoint: `/users/update-resume`\n- Verb: PUT\n\nOnFailure: Sends an error statuscode\nOnSuccess: Sends a success statuscode with an user Object",
    "lineNumber": 49,
    "deprecated": "- Use `/users/update-user`",
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "UserRouter-updateResume"
    }
  },
  {
    "__docId__": 248,
    "kind": "typedef",
    "name": "UserRouter-updateUser",
    "memberof": "ttuacm-backend/src/profile/profile.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.router.js~UserRouter-updateUser",
    "access": null,
    "description": "Updates the user's information completely\nThis route requires authentication\n\n- endpoint: `/users/update-user`\n- Verb: PUT\n\nOnFailure: Sends an error statuscode\nOnSuccess: Sends a success statuscode with an user Object",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req.body.user",
        "description": "A New User object with a ObjectID"
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "UserRouter-updateUser"
    }
  },
  {
    "__docId__": 249,
    "kind": "variable",
    "name": "router",
    "memberof": "ttuacm-backend/src/profile/profile.router.js",
    "static": true,
    "longname": "ttuacm-backend/src/profile/profile.router.js~router",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/profile/profile.router.js",
    "importStyle": "router",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "file",
    "name": "ttuacm-backend/src/utils/db-connect.js",
    "content": "const mongoose = require('mongoose')\n\n/**\n * Connects the API to it's MongoDB database\n *\n * @param {string} connection the url of the mongodb instance\n */\nfunction connectDB(connection) {\n  mongoose.connect(\n    connection,\n    {\n      useNewUrlParser: true,\n    },\n  )\n\n  mongoose.connection.on('connect', () => {\n    console.log('Connected to MongoDB')\n  })\n  mongoose.connection.on('error', (err) => {\n    console.error(`Error Connecting to database... \\n${err}`)\n    console.error(`Tried connecting to ${process.env.db}`)\n    process.exit(1);\n  })\n}\n\nmodule.exports = connectDB\n",
    "static": true,
    "longname": "ttuacm-backend/src/utils/db-connect.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 251,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "ttuacm-backend/src/utils/db-connect.js",
    "static": true,
    "longname": "ttuacm-backend/src/utils/db-connect.js~mongoose",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/db-connect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "connectDB",
    "memberof": "ttuacm-backend/src/utils/db-connect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/utils/db-connect.js~connectDB",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/db-connect.js",
    "importStyle": "connectDB",
    "description": "Connects the API to it's MongoDB database",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "connection",
        "description": "the url of the mongodb instance"
      }
    ]
  },
  {
    "__docId__": 253,
    "kind": "file",
    "name": "ttuacm-backend/src/utils/generate-hex.js",
    "content": "const crypto = require('crypto')\n\n/**\n * Generates a HexToken, usually for quick random tokens; does not require string\n *\n * @returns {string} JWT Token\n */\nfunction generateHexToken() {\n  const token = crypto.randomBytes(20);\n  return token.toString('hex');\n}\n\nmodule.exports = generateHexToken\n",
    "static": true,
    "longname": "ttuacm-backend/src/utils/generate-hex.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 254,
    "kind": "variable",
    "name": "crypto",
    "memberof": "ttuacm-backend/src/utils/generate-hex.js",
    "static": true,
    "longname": "ttuacm-backend/src/utils/generate-hex.js~crypto",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/generate-hex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "function",
    "name": "generateHexToken",
    "memberof": "ttuacm-backend/src/utils/generate-hex.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/utils/generate-hex.js~generateHexToken",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/generate-hex.js",
    "importStyle": "generateHexToken",
    "description": "Generates a HexToken, usually for quick random tokens; does not require string",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} JWT Token"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "JWT Token"
    }
  },
  {
    "__docId__": 256,
    "kind": "file",
    "name": "ttuacm-backend/src/utils/generate-jwt.js",
    "content": "const jwt = require('jsonwebtoken')\nconst functions = require('firebase-functions')\n\nconst secret = process.env.CI ? 'CISecret' : functions.config().auth.session_secret\n\n/**\n * Generates a JWT\n *\n * @param {object} payload all the data that will be stored into the token\n * @returns {string} JWT Token\n */\nfunction generateJWTToken(payload) {\n  const token = jwt.sign({ data: payload },\n    secret, { expiresIn: 604800 }) // 1 week\n\n  return token !== '' ? token : new Error('Empty JWT Payload')\n}\n\nmodule.exports = generateJWTToken\n",
    "static": true,
    "longname": "ttuacm-backend/src/utils/generate-jwt.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 257,
    "kind": "variable",
    "name": "jwt",
    "memberof": "ttuacm-backend/src/utils/generate-jwt.js",
    "static": true,
    "longname": "ttuacm-backend/src/utils/generate-jwt.js~jwt",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/generate-jwt.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "variable",
    "name": "functions",
    "memberof": "ttuacm-backend/src/utils/generate-jwt.js",
    "static": true,
    "longname": "ttuacm-backend/src/utils/generate-jwt.js~functions",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/generate-jwt.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "variable",
    "name": "secret",
    "memberof": "ttuacm-backend/src/utils/generate-jwt.js",
    "static": true,
    "longname": "ttuacm-backend/src/utils/generate-jwt.js~secret",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/generate-jwt.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "function",
    "name": "generateJWTToken",
    "memberof": "ttuacm-backend/src/utils/generate-jwt.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/utils/generate-jwt.js~generateJWTToken",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/generate-jwt.js",
    "importStyle": "generateJWTToken",
    "description": "Generates a JWT",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} JWT Token"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "all the data that will be stored into the token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "JWT Token"
    }
  },
  {
    "__docId__": 261,
    "kind": "file",
    "name": "ttuacm-backend/src/utils/protected-route.js",
    "content": "// TODO: Fix this so that every service has their own way to authenticate\nconst passport = require('passport');\n\n/**\n * Middleware for route guarding, this is pretty magical\n * I am not sure how this works lol\n *\n * If errors occur, it is probably because front-end is not sending\n * JWT along with their requests\n */\nconst membersOnlyRoute = passport.authenticate('jwt', { session: false })\n\nmodule.exports = {\n  membersOnlyRoute\n}\n",
    "static": true,
    "longname": "ttuacm-backend/src/utils/protected-route.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 262,
    "kind": "variable",
    "name": "passport",
    "memberof": "ttuacm-backend/src/utils/protected-route.js",
    "static": true,
    "longname": "ttuacm-backend/src/utils/protected-route.js~passport",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/protected-route.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "variable",
    "name": "membersOnlyRoute",
    "memberof": "ttuacm-backend/src/utils/protected-route.js",
    "static": true,
    "longname": "ttuacm-backend/src/utils/protected-route.js~membersOnlyRoute",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/protected-route.js",
    "importStyle": null,
    "description": "Middleware for route guarding, this is pretty magical\nI am not sure how this works lol\n\nIf errors occur, it is probably because front-end is not sending\nJWT along with their requests",
    "lineNumber": 11,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "file",
    "name": "ttuacm-backend/src/utils/request.js",
    "content": "const axios = require('axios')\nconst functions = require('firebase-functions')\nconst ErrorMessages = require('./request.errors')\n\nconst { connections } = functions.config()\n\nprocess.env = connections\n\n// These are the required environment variables\nconst { protocol, host } = process.env\n\nconst AVAILABLE_VERSIONS = new Set([ 'v2' ])\nconst AVAILABLE_SERVICES= new Set([\n  'auth',\n  'contacts',\n  'events',\n  'profile',\n  'email',\n])\n\n/**\n * Handles the errors returned from call\n *\n * @param {object} err Axios Error\n */\nfunction errorHandler(err) {\n  console.error(err)\n  if (err.response) {\n    // Server responded with a status code outside 2xx range.\n    console.error(ErrorMessages.ResponseError(err))\n  } else if (err.request) {\n    // No response recieved\n    console.error(ErrorMessages.NoResponseError())\n  } else {\n    // Who knows\n    console.error(ErrorMessages.UnknownServerError())\n  }\n}\n\n/**\n * Handles the creation of API Calls\n *\n * @example\n * const request = new Request('v2', 'auth')\n *\n * request.post().path('/register')\n *  .body(newUser)\n *  .end().then((res) => {\n *    console.log('Success!')\n *  }).catch((err) => {\n *    console.log('Failure!')\n *    console.error(err)\n *  })\n */\nclass Request {\n  /**\n   * Sets defaults for the connection\n   * @param {string} version version of the api to use\n   * @param {string} service service of the api to use\n   */\n  constructor(version, service) {\n    if (!AVAILABLE_VERSIONS.has(version)) throw ErrorMessages.BadVersion()\n    if (!AVAILABLE_SERVICES.has(service)) throw ErrorMessages.BadService()\n\n    this.version = version\n    this.status = 0\n    this.path = ''\n    this.method = 'get'\n    this.config = {\n      data: {},\n      params: {}\n    }\n\n    this.instance = axios.create({\n      baseURL: `${protocol}://${host}/api/${version}`,\n      timeout: 5000\n    })\n  }\n\n\n  /**\n   * Sets the body of the request object\n   *\n   * @param {object} body\n   * @returns {Request}\n   */\n  body(body) {\n    Object.keys(body).forEach((key) => {\n      this.config.data[key] = body[key];\n    });\n    return this;\n  }\n\n  /**\n   * Sets the params of the request object\n   *\n   * @param {object} params\n   * @returns {Request}\n   */\n  params(params) {\n    Object.keys(params).forEach((key) => {\n      this.config.params[key] = params[key];\n    });\n    return this;\n  }\n\n  /**\n   * Sets the path without the /\n   *\n   * @param {string} path\n   * @returns {Request}\n   */\n  path(path) {\n    this.path = path[0] === '/' ? path : path.substr(1)\n    return this\n  }\n\n  /**\n   * Sets the method for the call\n   *\n   * @private\n   * @param {string} method\n   * @returns {Request}\n   */\n  _setMethod(method) {\n    this.method = method\n    return this\n  }\n\n  post() { return this._setMethod('post') }\n\n  del() { return this._setMethod('delete') }\n\n  put() { return this._setMethod('put') }\n\n  patch() { return this._setMethod('patch') }\n\n  get() { return this._setMethod('get') }\n\n  /**\n   * Composes the call altogether\n   * @returns {Promise.<Response, Error>}\n   */\n  end() {\n    return new Promise(async (resolve, reject) => {\n      this.config.method = this.method\n      this.config.url = `/${this.path}`\n\n      try {\n        const res = this.instance(this.config)\n        resolve(res)\n      } catch (err) {\n        errorHandler(err)\n        reject(err)\n      }\n\n    })\n  }\n}\n\nmodule.exports = Request\n",
    "static": true,
    "longname": "ttuacm-backend/src/utils/request.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 265,
    "kind": "variable",
    "name": "axios",
    "memberof": "ttuacm-backend/src/utils/request.js",
    "static": true,
    "longname": "ttuacm-backend/src/utils/request.js~axios",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/request.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "variable",
    "name": "functions",
    "memberof": "ttuacm-backend/src/utils/request.js",
    "static": true,
    "longname": "ttuacm-backend/src/utils/request.js~functions",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/request.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "variable",
    "name": "ErrorMessages",
    "memberof": "ttuacm-backend/src/utils/request.js",
    "static": true,
    "longname": "ttuacm-backend/src/utils/request.js~ErrorMessages",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/request.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "variable",
    "name": "connections",
    "memberof": "ttuacm-backend/src/utils/request.js",
    "static": true,
    "longname": "ttuacm-backend/src/utils/request.js~connections",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/request.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "variable",
    "name": "protocol",
    "memberof": "ttuacm-backend/src/utils/request.js",
    "static": true,
    "longname": "ttuacm-backend/src/utils/request.js~protocol",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/request.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "variable",
    "name": "AVAILABLE_VERSIONS",
    "memberof": "ttuacm-backend/src/utils/request.js",
    "static": true,
    "longname": "ttuacm-backend/src/utils/request.js~AVAILABLE_VERSIONS",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/request.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "Set"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "variable",
    "name": "AVAILABLE_SERVICES",
    "memberof": "ttuacm-backend/src/utils/request.js",
    "static": true,
    "longname": "ttuacm-backend/src/utils/request.js~AVAILABLE_SERVICES",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/request.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "Set"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "function",
    "name": "errorHandler",
    "memberof": "ttuacm-backend/src/utils/request.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ttuacm-backend/src/utils/request.js~errorHandler",
    "access": null,
    "export": false,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/request.js",
    "importStyle": null,
    "description": "Handles the errors returned from call",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "Axios Error"
      }
    ]
  },
  {
    "__docId__": 273,
    "kind": "class",
    "name": "Request",
    "memberof": "ttuacm-backend/src/utils/request.js",
    "static": true,
    "longname": "ttuacm-backend/src/utils/request.js~Request",
    "access": null,
    "export": true,
    "importPath": "ttuacm-backend/ttuacm-backend/src/utils/request.js",
    "importStyle": "Request",
    "description": "Handles the creation of API Calls",
    "examples": [
      "const request = new Request('v2', 'auth')\n\nrequest.post().path('/register')\n .body(newUser)\n .end().then((res) => {\n   console.log('Success!')\n }).catch((err) => {\n   console.log('Failure!')\n   console.error(err)\n })"
    ],
    "lineNumber": 55,
    "interface": false
  },
  {
    "__docId__": 274,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#constructor",
    "access": null,
    "description": "Sets defaults for the connection",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": "version of the api to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "service",
        "description": "service of the api to use"
      }
    ]
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "version",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#version",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "status",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#status",
    "access": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "path",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#path",
    "access": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "member",
    "name": "method",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#method",
    "access": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "config",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#config",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"data\": *, \"params\": *}"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "instance",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#instance",
    "access": null,
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "body",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#body",
    "access": null,
    "description": "Sets the body of the request object",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Request}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Request"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "params",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#params",
    "access": null,
    "description": "Sets the params of the request object",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Request}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Request"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "path",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#path",
    "access": null,
    "description": "Sets the path without the /",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Request}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Request"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "path",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#path",
    "access": null,
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "_setMethod",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#_setMethod",
    "access": "private",
    "description": "Sets the method for the call",
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Request}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Request"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "method",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#method",
    "access": null,
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "post",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#post",
    "access": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "del",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#del",
    "access": null,
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "put",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#put",
    "access": null,
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "patch",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#patch",
    "access": null,
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "get",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#get",
    "access": null,
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "end",
    "memberof": "ttuacm-backend/src/utils/request.js~Request",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ttuacm-backend/src/utils/request.js~Request#end",
    "access": null,
    "description": "Composes the call altogether",
    "lineNumber": 144,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Response, Error>}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Response, Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 294,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 295,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 296,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 297,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 298,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 299,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 300,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 301,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 302,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 303,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 304,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 305,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 306,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 307,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 308,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 309,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 310,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 311,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 312,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 313,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 314,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 315,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 316,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 317,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 318,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 319,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 320,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 321,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 322,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 323,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 324,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 325,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 326,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 327,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 328,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 329,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 330,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 331,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 332,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 333,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 334,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 335,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 336,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 337,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 338,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 339,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 340,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 342,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 343,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 344,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 345,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 346,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 347,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 348,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 349,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  }
]